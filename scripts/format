#!/bin/bash

# DEPRECATION NOTICE: This script is deprecated in favor of the unified Pangaea CLI
# Use: ./pangaea.sh format oaAnsible
# This script will be removed in a future version

echo -e "\033[1;33m[DEPRECATED]\033[0m This script is deprecated. Use: ./pangaea.sh format oaAnsible"
echo -e "Continuing with execution for backward compatibility..."
echo ""

# format - Safe and comprehensive formatter for Ansible YAML files
# Automatically fixes common issues while preserving YAML structure

set -e

# Source helper functions and variables
HELPER_SCRIPT_PATH="$(dirname "${BASH_SOURCE[0]}")/helpers.sh"
if [ -f "$HELPER_SCRIPT_PATH" ]; then
    # shellcheck source=./helpers.sh
    source "$HELPER_SCRIPT_PATH"
else
    echo "ERROR: helpers.sh not found at $HELPER_SCRIPT_PATH"
    exit 1
fi

# Cross-platform sed function
cross_platform_sed() {
    local pattern="$1"
    local file="$2"
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' "$pattern" "$file"
    else
        sed -i "$pattern" "$file"
    fi
}

# Get the appropriate Python executable using helper function
get_python_executable "$OA_ANSIBLE_ROOT_DIR"

# Set script-specific log level
SCRIPT_LOG_LEVEL=$_LOG_LEVEL_INFO
export SCRIPT_LOG_LEVEL

log_debug "format script started."
ensure_ansible_root_dir

# Define directories to process (excluding "." to prevent duplicate processing)
directories=(
    "./roles/macos"
    "./playbooks"
    "./tasks"
    "./group_vars"
    "./inventory"
)

# Additional root files to process (only YAML files)
root_files=(
    "./main.yml"
    "./requirements.yml"
)

# Files to exclude from processing
exclude_patterns=(
    "*/\.*"
    "*/logs/*"
    "*/elliotweiser.osx-command-line-tools/*"
    "*/node_modules/*"
    "*/venv/*"
    "*/.venv/*"
    "*/group_vars/all/vault.yml"
)

log_info "=== OrangeAd Ansible Ultimate Format Tool ==="
log_info "Safely fixing linting issues and standardizing YAML files..."

# Function to check if file should be excluded
should_exclude() {
    local file="$1"
    for pattern in "${exclude_patterns[@]}"; do
        case "$file" in
        $pattern) return 0 ;;
        esac
    done
    return 1
}

# Function to validate YAML syntax
validate_yaml() {
    local file="$1"
    "$PYTHON_BIN" -c "
import yaml
import sys
try:
    with open('$file', 'r') as f:
        yaml.safe_load(f)
    sys.exit(0)
except Exception as e:
    print(f'YAML Error in $file: {e}')
    sys.exit(1)
" 2>/dev/null
}

# Function to safely fix FQCN issues preserving indentation
fix_fqcn_issues() {
    log_info "Fixing FQCN (Fully Qualified Collection Names) issues..."

    # Common modules that need FQCN (excluding gather_facts which is typically playbook-level)
    local modules=(
        "debug" "set_fact" "fail" "copy" "file" "template" "lineinfile"
        "stat" "command" "shell" "service" "meta" "pause"
        "uri" "get_url" "unarchive" "include_tasks" "import_tasks"
        "include_vars" "package" "pip" "git" "cron" "mount" "systemd"
        "find" "replace" "blockinfile" "script" "raw" "wait_for"
        "assert" "include_role" "import_role" "setup"
        "add_host" "group_by"
    )

    for dir in "${directories[@]}"; do
        if [ -d "$dir" ]; then
            log_info "Processing FQCN in $dir..."
            find "$dir" -name "*.yml" -o -name "*.yaml" | while read -r file; do
                if ! should_exclude "$file"; then
                    # Create backup
                    cp "$file" "${file}.bak"

                    # Process each module
                    for module in "${modules[@]}"; do
                        cross_platform_sed "s/^\\([[:space:]]*\\)${module}:/\\1ansible.builtin.${module}:/g" "$file"
                    done

                    # Fix incorrectly applied FQCN to common parameters
                    cross_platform_sed 's/ansible\.builtin\.group: staff/group: staff/g' "$file"
                    cross_platform_sed 's/ansible\.builtin\.owner:/owner:/g' "$file"
                    cross_platform_sed 's/ansible\.builtin\.mode:/mode:/g' "$file"
                    cross_platform_sed 's/ansible\.builtin\.state:/state:/g' "$file"
                    cross_platform_sed 's/ansible\.builtin\.path:/path:/g' "$file"

                    # Fix playbook-level gather_facts that got incorrectly converted
                    cross_platform_sed 's/ansible\.builtin\.gather_facts: /gather_facts: /g' "$file"

                    # Validate the result
                    if validate_yaml "$file"; then
                        rm -f "${file}.bak"
                        log_info "✓ Fixed FQCN in $file"
                    else
                        log_warn "✗ YAML validation failed for $file, restoring backup"
                        mv "${file}.bak" "$file"
                    fi
                fi
            done
        fi
    done
}

# Function to process root files
process_root_files() {
    log_info "Processing root YAML files..."

    for file in "${root_files[@]}"; do
        if [ -f "$file" ] && ! should_exclude "$file"; then
            # Create backup
            cp "$file" "${file}.bak"

            # Apply formatting fixes
            cross_platform_sed 's/[[:space:]]*$//' "$file"
            cross_platform_sed 's/: yes$/: true/g' "$file"
            cross_platform_sed 's/: no$/: false/g' "$file"

            if ! head -n1 "$file" | grep -q "^---" && grep -q "^[[:space:]]*[^#[:space:]]" "$file"; then
                cross_platform_sed '1i\
---
' "$file"
            fi

            if validate_yaml "$file"; then
                rm -f "${file}.bak"
                log_info "✓ Fixed formatting in $file"
            else
                log_warn "✗ YAML validation failed for $file, restoring backup"
                mv "${file}.bak" "$file"
            fi
        fi
    done
}

# Function to fix basic YAML formatting issues safely
fix_yaml_formatting() {
    log_info "Fixing basic YAML formatting issues..."

    # Process root files first
    process_root_files

    for dir in "${directories[@]}"; do
        if [ -d "$dir" ]; then
            log_info "Processing YAML formatting in $dir..."

            find "$dir" -name "*.yml" -o -name "*.yaml" | while read -r file; do
                if ! should_exclude "$file"; then
                    # Create backup
                    cp "$file" "${file}.bak"

                    # Only make safe changes
                    # 1. Remove trailing spaces
                    cross_platform_sed 's/[[:space:]]*$//' "$file"

                    # 2. Fix obvious truthy values
                    cross_platform_sed 's/: yes$/: true/g' "$file"
                    cross_platform_sed 's/: no$/: false/g' "$file"

                    # 3. Add document start marker only if file is missing it and has content
                    if ! head -n1 "$file" | grep -q "^---" && grep -q "^[[:space:]]*[^#[:space:]]" "$file"; then
                        cross_platform_sed '1i\
---
' "$file"
                    fi

                    # Validate the result
                    if validate_yaml "$file"; then
                        rm -f "${file}.bak"
                        log_info "✓ Fixed formatting in $file"
                    else
                        log_warn "✗ YAML validation failed for $file, restoring backup"
                        mv "${file}.bak" "$file"
                    fi
                fi
            done
        fi
    done
}

# Function to install prettier if not available
install_prettier() {
    if ! command -v prettier >/dev/null 2>&1; then
        log_info "Installing prettier for YAML formatting..."
        if command -v npm >/dev/null 2>&1; then
            npm install -g prettier @prettier/plugin-ruby
            log_info "Prettier installed globally"
        elif command -v brew >/dev/null 2>&1; then
            brew install prettier
        else
            log_warn "Could not install prettier. Please install Node.js/npm or Homebrew first."
            return 1
        fi
    fi
}

# Function to run ansible-lint automatic fixes
run_ansible_lint_fixes() {
    log_info "Running ansible-lint automatic fixes..."
    
    # Set Ansible config path for ansible-lint
    export ANSIBLE_CONFIG="$(get_ansible_config_path)"

    if [ -f "$VENV_PATH/bin/ansible-lint" ]; then
        log_info "Applying automatic fixes with ansible-lint from virtual environment..."
        "$VENV_PATH/bin/ansible-lint" --write --offline -q || log_warn "Some ansible-lint issues could not be automatically fixed"
    elif command -v ansible-lint >/dev/null 2>&1; then
        log_info "Applying automatic fixes with system ansible-lint..."
        ansible-lint --write --offline -q || log_warn "Some ansible-lint issues could not be automatically fixed"
    else
        log_error "ansible-lint not found. Please install it with: pip install ansible-lint"
        return 1
    fi
}

# Function to fix line lengths and other YAML formatting while preserving blank lines
run_prettier_fixes() {
    log_info "Running prettier to fix line lengths while preserving readability..."

    install_prettier

    if command -v prettier >/dev/null 2>&1; then
        # Check if .prettierrc.yaml exists
        if [ ! -f ".prettierrc.yaml" ]; then
            log_warn ".prettierrc.yaml not found. Please ensure it exists in the project root."
            return 1
        fi

        log_info "Using existing .prettierrc.yaml configuration"

        # Apply prettier to all directories
        for dir in "${directories[@]}"; do
            if [ -d "$dir" ]; then
                log_info "Formatting YAML files in $dir with prettier..."
                find "$dir" -name "*.yml" -o -name "*.yaml" | while read -r file; do
                    if ! should_exclude "$file"; then
                        prettier --write "$file" 2>/dev/null || log_warn "Could not format $file with prettier"
                    fi
                done
            fi
        done

        # Format root files
        for file in "${root_files[@]}"; do
            if [ -f "$file" ] && ! should_exclude "$file"; then
                prettier --write "$file" 2>/dev/null || log_warn "Could not format $file with prettier"
            fi
        done

        log_info "Prettier formatting completed using project configuration"
    else
        log_warn "prettier not available, skipping line length fixes"
    fi
}

# Function to run yamllint validation
run_yamllint_check() {
    log_info "Running yamllint validation..."

    if [ -f "$VENV_PATH/bin/yamllint" ]; then
        log_info "Using yamllint from virtual environment..."
        if "$VENV_PATH/bin/yamllint" . >/dev/null 2>&1; then
            log_info "All YAML files pass yamllint validation"
        else
            log_warn "Some yamllint issues found:"
            "$VENV_PATH/bin/yamllint" . | head -20
            echo "..."
            log_warn "Run 'yamllint .' for full output"
        fi
    elif command -v yamllint >/dev/null 2>&1; then
        if yamllint . >/dev/null 2>&1; then
            log_info "All YAML files pass yamllint validation"
        else
            log_warn "Some yamllint issues found:"
            yamllint . | head -20
            echo "..."
            log_warn "Run 'yamllint .' for full output"
        fi
    else
        log_error "yamllint not found. Please install it with: pip install yamllint"
        return 1
    fi
}

# Function to show summary of changes
show_changes_summary() {
    log_info "Checking for modified files..."

    if command -v git >/dev/null 2>&1 && [ -d .git ]; then
        local modified_files=$(git diff --name-only)
        if [ -n "$modified_files" ]; then
            log_info "Modified files:"
            echo "$modified_files" | while read -r file; do
                echo "  - $file"
            done
        else
            log_info "No files were modified"
        fi
    fi
}

# Main execution
log_info "Starting safe formatting process..."

# Step 1: Fix basic YAML formatting issues
fix_yaml_formatting

# Step 2: Fix FQCN issues
fix_fqcn_issues

# Step 3: Run prettier for line length and formatting fixes (preserves blank lines)
run_prettier_fixes

# Step 4: Run ansible-lint automatic fixes
run_ansible_lint_fixes

# Step 5: Final yamllint check
log_info "Running final validation checks..."
run_yamllint_check

# Step 6: Show summary
show_changes_summary

log_info "=== Format script completed safely ==="
log_info "Summary of fixes applied:"
log_info "  ✓ Fixed YAML document start markers (validated)"
log_info "  ✓ Removed trailing spaces"
log_info "  ✓ Converted truthy values (yes/no → true/false)"
log_info "  ✓ Added FQCN for builtin modules (with validation)"
log_info "  ✓ Fixed line lengths with prettier (preserving blank lines)"
log_info "  ✓ Applied ansible-lint automatic fixes"
log_info "Next steps:"
log_info "  1. Review any remaining yamllint warnings above"
log_info "  2. Run 'ansible-lint' to check for remaining issues"
log_info "  3. Test your playbooks to ensure functionality"
log_warn "All changes were validated to ensure YAML syntax remains correct."

log_debug "format script finished."