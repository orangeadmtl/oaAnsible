---
# Advanced Execution Modes
# Implements dry-run, check-mode, diff-mode, and force-mode capabilities

- name: Initialize execution mode configuration
  ansible.builtin.set_fact:
    execution_config:
      # Use script_execution_mode for operational flags when available (tag-based deployment)
      mode: "{{ script_execution_mode | default(execution_mode) | default('normal') }}"
      dry_run: "{{ ansible_check_mode | default(false) or ansible_diff_mode | default(false) }}"
      check_mode: "{{ ansible_check_mode | default(false) }}"
      diff_mode: "{{ ansible_diff_mode | default(false) }}"
      force_mode: "{{ force_deployment | default(false) }}"
      verbose: "{{ verbose_mode | default(false) }}"
    # Preserve the component-based execution mode when it was set for tag-based deployment
    preserved_execution_mode: "{{ execution_mode | default('normal') }}"
  tags: ["always"]

- name: Initialize safety checks configuration
  ansible.builtin.set_fact:
    execution_config:
      "{{ execution_config | combine({'safety_checks': {'require_confirmation': (not (execution_config.force_mode | default(false))) and (oa_environment.name |
      default('') | regex_search('-prod$')), 'validate_prerequisites': true, 'check_disk_space': true, 'verify_network_connectivity': true,
      'backup_configurations': execution_config.mode != 'dry-run'}}) }}"
  tags: ["always"]

- name: Display execution mode banner
  ansible.builtin.debug:
    msg: |
      Execution Mode: {{ execution_config.mode | upper }}

      Configuration:
      - Dry Run: {{ execution_config.dry_run }}
      - Check Mode: {{ execution_config.check_mode }}
      - Diff Mode: {{ execution_config.diff_mode }}
      - Force Mode: {{ execution_config.force_mode }}
      - Safety Checks: {{ execution_config.safety_checks.require_confirmation }}

      {% if execution_config.dry_run %}
      DRY RUN MODE: No changes will be made to the system
      {% endif %}
      {% if execution_config.check_mode %}
      CHECK MODE: Validating configuration and showing potential changes
      {% endif %}
      {% if execution_config.diff_mode %}
      DIFF MODE: Showing detailed differences for all changes
      {% endif %}
      {% if execution_config.force_mode %}
      WARNING: FORCE MODE: Safety checks disabled - proceed with caution!
      {% endif %}
  tags: ["always"]

- name: Perform pre-execution safety checks
  when: execution_config.safety_checks.validate_prerequisites
  block:
    - name: Check available disk space
      ansible.builtin.shell: |
        set -o pipefail
        df -h {{ ansible_user_dir }} | tail -1 | awk '{print $4}' | sed 's/[A-Za-z]*$//'
      register: available_disk_gb
      changed_when: false
      failed_when: false

    - name: Report disk space information
      ansible.builtin.debug:
        msg: |
          Disk Space Information:
          Available: {{ available_disk_gb.stdout }}GB
          Required: 5GB minimum
          Status: {{ 'OK' if (available_disk_gb.stdout | default('0') | int >= 5) else 'LOW' }}

          {% if (available_disk_gb.stdout | default('0') | int < 5) %}
          WARNING: Low disk space detected. Consider freeing up space if deployment fails.
          {% endif %}
      when:
        - available_disk_gb.rc == 0
        - available_disk_gb.stdout != ""

    - name: Check network connectivity to required services
      ansible.builtin.uri:
        url: "{{ item }}"
        method: HEAD
        timeout: 10
        status_code: [200, 301, 302, 403, 404] # Accept various responses
      loop:
        - "https://github.com"
        - "https://pypi.org"
      register: connectivity_check
      failed_when: false
      changed_when: false
      when: execution_config.safety_checks.verify_network_connectivity

    - name: Report connectivity issues
      ansible.builtin.debug:
        msg: |
          WARNING: Network connectivity warning:
          Some required services may not be reachable.
          Deployment may fail if packages cannot be downloaded.
      when:
        - connectivity_check.results is defined
        - connectivity_check.results | selectattr('status', 'undefined') | list | length > 0
        - not execution_config.force_mode

- name: Generate execution plan
  when: execution_config.dry_run or execution_config.check_mode
  block:
    - name: Create execution plan
      ansible.builtin.set_fact:
        execution_plan:
          components_to_deploy: "{{ final_component_order | default([]) }}"
          estimated_duration: "{{ (final_component_order | default([]) | length * 3) | int }}min"
          changes_summary: []
          resources_required: "{{ component_compatibility.total_resources | default({}) }}"

    - name: Simulate component deployment changes
      ansible.builtin.set_fact:
        execution_plan:
          "{{ execution_plan | combine({'changes_summary': execution_plan.changes_summary + [{'component': item, 'action': 'deploy' if item not in
          (existing_components | default([])) else 'update', 'estimated_time': '2-5min', 'changes': ['Create/update application files', 'Configure virtual
          environment', 'Install/update dependencies', 'Configure service (LaunchAgent/SystemD)', 'Start/restart service']}]}) }}"
      loop: "{{ final_component_order | default([]) }}"

    - name: Display execution plan
      ansible.builtin.debug:
        msg: |
          EXECUTION PLAN

          Components: {{ execution_plan.components_to_deploy | length }}
          Estimated Duration: {{ execution_plan.estimated_duration }}
          Resource Requirements:
          - Memory: {{ execution_plan.resources_required.memory_mb | default(0) }}MB
          - Disk: {{ execution_plan.resources_required.disk_mb | default(0) }}MB
          - Ports: {{ execution_plan.resources_required.ports_needed | default([]) | join(', ') }}

          Deployment Sequence:
          {% for change in execution_plan.changes_summary %}
          {{ loop.index }}. {{ change.component | upper }} ({{ change.action }})
             Duration: {{ change.estimated_time }}
             Changes:
          {% for item in change.changes %}
             - {{ item }}
          {% endfor %}
          {% endfor %}

- name: Determine components for confirmation
  ansible.builtin.set_fact:
    confirmation_components: >
      {{
        (oa_environment.deploy_macos_api | default(false) | ternary(['device-api'], [])) +
        (oa_environment.deploy_tracker | default(false) | ternary(['tracker'], [])) +
        (oa_environment.deploy_player | default(false) | ternary(['player'], [])) +
        (oa_environment.deploy_alpr_service | default(false) | ternary(['alpr'], [])) +
        (oa_environment.deploy_cursorcerer | default(false) | ternary(['cursorcerer'], [])) +
        (['base', 'network', 'security'])
      }}
  when:
    - execution_config.safety_checks.require_confirmation
    - not execution_config.dry_run
    - not execution_config.check_mode

- name: Request confirmation for destructive operations
  when:
    - execution_config.safety_checks.require_confirmation
    - not execution_config.dry_run
    - not execution_config.check_mode
  block:
    - name: Pause for confirmation
      ansible.builtin.pause:
        prompt: |2

          WARNING: DEPLOYMENT CONFIRMATION REQUIRED

          You are about to deploy {{ confirmation_components | default([]) | length }} components:
          {{ confirmation_components | default([]) | join(', ') }}

          Project: {{ oa_environment.project | default('default') }}
          Environment: {{ oa_environment.name | default('unknown') }}

          This will:
          - Modify system configuration
          - Install/update software packages
          - Start/restart services
          - Configure project-specific components

          Do you want to continue? (yes/no)
        echo: true
      register: deployment_confirmation
      run_once: true

    - name: Validate confirmation
      ansible.builtin.fail:
        msg: |
          ERROR: Deployment cancelled by user.
          To skip confirmation, use --extra-vars "execution_mode=force"
      when: deployment_confirmation.user_input | lower != 'yes'
      run_once: true

- name: Hash-based backup with change detection
  when:
    - execution_config.safety_checks.backup_configurations
    - not execution_config.dry_run
  block:
    - name: Calculate configuration hash
      ansible.builtin.shell: |
        set -e
        USER_DIR="{{ ansible_user_dir }}"
        
        # Calculate hash of configuration state
        HASH_INPUT=""
        
        # Hash LaunchAgents
        if [ -d "$USER_DIR/Library/LaunchAgents" ]; then
          HASH_INPUT="${HASH_INPUT}$(find "$USER_DIR/Library/LaunchAgents" -name "*.plist" -type f -exec md5sum {} + 2>/dev/null | sort)"
        fi
        
        # Hash orangead configuration files (not data/logs/deps)
        if [ -d "$USER_DIR/orangead" ]; then
          HASH_INPUT="${HASH_INPUT}$(find "$USER_DIR/orangead" \
            -type f \
            ! -path '*/.venv/*' \
            ! -path '*/__pycache__/*' \
            ! -path '*/node_modules/*' \
            ! -path '*/.git/*' \
            ! -path '*/build/*' \
            ! -path '*/dist/*' \
            ! -path '*/logs/*' \
            ! -name '*.log' \
            ! -name '*.tmp' \
            ! -name '*.pyc' \
            ! -name '*.pt' \
            ! -name '*.onnx' \
            ! -name '*.coreml' \
            ! -name '.DS_Store' \
            -exec md5sum {} + 2>/dev/null | sort)"
        fi
        
        # Generate configuration hash
        CONFIG_HASH=$(echo "$HASH_INPUT" | md5sum | cut -d' ' -f1)
        echo "CONFIG_HASH=$CONFIG_HASH"
      register: config_hash_result
      changed_when: false
      failed_when: false

    - name: Check for existing backup with same configuration
      ansible.builtin.shell: |
        set -e
        BACKUP_META_DIR="{{ ansible_user_dir }}/orangead-backups/.meta"
        CONFIG_HASH="{{ config_hash_result.stdout | regex_search('CONFIG_HASH=(.+)') | regex_replace('CONFIG_HASH=', '') | default('unknown') }}"
        
        mkdir -p "$BACKUP_META_DIR"
        
        if [ -f "$BACKUP_META_DIR/latest_hash.txt" ]; then
          PREVIOUS_HASH=$(cat "$BACKUP_META_DIR/latest_hash.txt")
          if [ "$CONFIG_HASH" = "$PREVIOUS_HASH" ]; then
            echo "BACKUP_NEEDED=false"
            echo "BACKUP_REASON=Configuration unchanged (hash: $CONFIG_HASH)"
            exit 0
          fi
        fi
        
        echo "BACKUP_NEEDED=true"
        echo "BACKUP_REASON=Configuration changed (hash: $CONFIG_HASH)"
      register: backup_check_result
      changed_when: false
      failed_when: false

    - name: Set backup decision facts
      ansible.builtin.set_fact:
        deployment_backup:
          needed: "{{ backup_check_result.stdout | regex_search('BACKUP_NEEDED=(.+)') | regex_replace('BACKUP_NEEDED=', '') | default('true') | bool }}"
          reason: "{{ backup_check_result.stdout | regex_search('BACKUP_REASON=(.+)') | regex_replace('BACKUP_REASON=', '') | default('Configuration hash check failed') }}"
          config_hash: "{{ config_hash_result.stdout | regex_search('CONFIG_HASH=(.+)') | regex_replace('CONFIG_HASH=', '') | default('unknown') }}"

    - name: Display backup decision
      ansible.builtin.debug:
        msg: |
          [BACKUP ANALYSIS] Configuration Change Detection:
          ===============================================
          Hash: {{ deployment_backup.config_hash }}
          Decision: {{ 'BACKUP REQUIRED' if deployment_backup.needed else 'BACKUP SKIPPED' }}
          Reason: {{ deployment_backup.reason }}
          ===============================================

    - name: Create efficient backup (only when needed)
      when: deployment_backup.needed
      block:
        - name: Create backup directory structure
          ansible.builtin.file:
            path: "{{ ansible_user_dir }}/orangead-backups/{{ ansible_date_time.epoch }}"
            state: directory
            mode: "0755"
          register: backup_dir

        - name: Create essential configuration backup
          ansible.builtin.shell: |
            set -e
            BACKUP_DIR="{{ backup_dir.path }}"
            USER_DIR="{{ ansible_user_dir }}"
            
            # Create directory structure
            mkdir -p "$BACKUP_DIR/Library/LaunchAgents"
            mkdir -p "$BACKUP_DIR/orangead"
            
            # Backup LaunchAgents
            if [ -d "$USER_DIR/Library/LaunchAgents" ]; then
              find "$USER_DIR/Library/LaunchAgents" -name "*.plist" -exec cp {} "$BACKUP_DIR/Library/LaunchAgents/" \; 2>/dev/null || true
            fi
            
            # Backup orangead configurations (no compression, direct copy)
            if [ -d "$USER_DIR/orangead" ]; then
              rsync -a \
                --exclude='.venv/' \
                --exclude='__pycache__/' \
                --exclude='*.pyc' \
                --exclude='node_modules/' \
                --exclude='*.log' \
                --exclude='logs/' \
                --exclude='*.tmp' \
                --exclude='.git/' \
                --exclude='build/' \
                --exclude='dist/' \
                --exclude='*.egg-info/' \
                --exclude='models/*.pt' \
                --exclude='models/*.onnx' \
                --exclude='models/*.coreml' \
                --exclude='.DS_Store' \
                "$USER_DIR/orangead/" "$BACKUP_DIR/orangead/" || true
            fi
            
            # Calculate backup size
            BACKUP_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
            echo "BACKUP_SIZE=$BACKUP_SIZE"
          register: backup_results
          failed_when: false

        - name: Update configuration hash record
          ansible.builtin.shell: |
            set -e
            BACKUP_META_DIR="{{ ansible_user_dir }}/orangead-backups/.meta"
            CONFIG_HASH="{{ deployment_backup.config_hash }}"
            BACKUP_TIMESTAMP="{{ ansible_date_time.epoch }}"
            
            mkdir -p "$BACKUP_META_DIR"
            echo "$CONFIG_HASH" > "$BACKUP_META_DIR/latest_hash.txt"
            echo "$BACKUP_TIMESTAMP $CONFIG_HASH" >> "$BACKUP_META_DIR/backup_history.log"
          changed_when: true

        - name: Clean up old backups (retain last 3 only)
          ansible.builtin.shell: |
            cd "{{ ansible_user_dir }}/orangead-backups"
            
            # Keep only the 3 most recent backup directories
            ls -t | grep '^[0-9]*$' | tail -n +4 | xargs rm -rf || true
            
            # Report current backup count
            BACKUP_COUNT=$(ls -d [0-9]* 2>/dev/null | wc -l)
            echo "RETAINED_BACKUPS=$BACKUP_COUNT"
          register: cleanup_result
          changed_when: false
          failed_when: false

        - name: Set successful backup facts
          ansible.builtin.set_fact:
            deployment_backup: "{{ deployment_backup | combine({
              'created': true,
              'path': backup_dir.path,
              'timestamp': ansible_date_time.epoch,
              'size': backup_results.stdout | regex_search('BACKUP_SIZE=(.+)') | regex_replace('BACKUP_SIZE=', '') | default('unknown')
            }) }}"

        - name: Display backup success summary
          ansible.builtin.debug:
            msg: |
              [SUCCESS] Hash-Based Backup Created:
              ===================================
              Path: {{ deployment_backup.path }}
              Size: {{ deployment_backup.size }}
              Hash: {{ deployment_backup.config_hash }}
              
              Efficiency Gains:
              - No compression overhead (instant backup)
              - Skip identical configurations (hash-based)
              - Reduced storage (3 backups vs 5 compressed)
              
              To restore: rsync -a {{ deployment_backup.path }}/ {{ ansible_user_dir }}/
              ===================================

    - name: Set skipped backup facts
      when: not deployment_backup.needed
      ansible.builtin.set_fact:
        deployment_backup: "{{ deployment_backup | combine({
          'created': false,
          'path': '',
          'timestamp': '',
          'size': '0MB',
          'retained_count': 'unchanged'
        }) }}"

- name: Set execution mode facts
  ansible.builtin.set_fact:
    deployment_execution:
      mode: "{{ execution_config.mode }}"
      dry_run: "{{ execution_config.dry_run }}"
      check_mode: "{{ execution_config.check_mode }}"
      diff_mode: "{{ execution_config.diff_mode }}"
      force_mode: "{{ execution_config.force_mode }}"
      safety_checks_passed: true
      backup_created: "{{ deployment_backup.created | default(false) }}"
      backup_path: "{{ deployment_backup.path | default('') }}"
      execution_plan: "{{ execution_plan | default({}) }}"
      confirmed: "{{ not execution_config.safety_checks.require_confirmation or deployment_confirmation.user_input | default('yes') | lower == 'yes' }}"
  tags: ["always"]

- name: Skip deployment in dry-run mode
  ansible.builtin.debug:
    msg: |
      DRY RUN COMPLETE

      No changes were made to the system.
      Review the execution plan above and run without dry-run mode to apply changes.

      To execute: Remove 'execution_mode=dry-run' from your command.
  when: execution_config.dry_run

- name: Skip deployment in check mode
  ansible.builtin.debug:
    msg: |
      CHECK MODE COMPLETE

      Configuration validation passed.
      Review the potential changes above and run in normal mode to apply.

      To execute: Remove 'execution_mode=check' from your command.
  when: execution_config.check_mode