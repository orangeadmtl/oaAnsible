---
# Component Deployment Task File
# Handles selective deployment of individual components based on platform

- name: DEBUG - Component deployment starting
  ansible.builtin.debug:
    msg: "Deploy-components.yml has been reached!"
  tags: ["always"]

- name: Validate component compatibility with platform
  ansible.builtin.set_fact:
    compatible_components: []
  tags: ["always"]

- name: Check macOS component compatibility
  ansible.builtin.set_fact:
    compatible_components:
      "{{ compatible_components + ['device-api', 'tracker', 'alpr', 'player', 'camguard', 'mediamtx_demo', 'cursorcerer', 'parking-monitor',
      'staging-video-feed', 'base', 'network', 'security', 'ssh', 'shell'] }}"
  when: target_platform == "macos"
  tags: ["always"]

- name: Check Ubuntu component compatibility
  ansible.builtin.set_fact:
    compatible_components:
      "{{ compatible_components + ['base', 'network', 'security', 'docker', 'monitoring', 'nvidia', 'ml', 'health', 'storage', 'shell', 'oasentinel-setup',
      'oasentinel-data', 'oasentinel-train', 'oasentinel-full'] }}"
  when: target_platform == "ubuntu"
  tags: ["always"]

- name: Check OrangePi component compatibility
  ansible.builtin.set_fact:
    compatible_components: "{{ compatible_components + ['base', 'shell', 'tailscale', 'player', 'monitoring'] }}"
  when: target_platform == "orangepi"
  tags: ["always"]

- name: Validate selected components
  ansible.builtin.fail:
    msg: |
      Invalid component '{{ item }}' for platform '{{ target_platform }}'.
      Available components: {{ compatible_components | join(', ') }}
  when: item not in compatible_components
  loop: "{{ deployment_components | default(selected_components) }}"
  tags: ["always"]

- name: Display deployment plan
  ansible.builtin.debug:
    msg: |
      Component Deployment Plan:
      - Platform: {{ target_platform }}
      - Components: {{ deployment_components | default(selected_components) | join(', ') }}
      - Compatible: {{ compatible_components | join(', ') }}
      - Target Platform: {{ target_platform | default('UNDEFINED') }}
      - Selected Components: {{ selected_components | default([]) | join(', ') }}
  tags: ["always"]

# Deploy components in dependency order: security -> base -> network -> applications
# Security must be first to configure passwordless sudo for Ubuntu

- name: Deploy security component (priority for Ubuntu sudo config)
  when: "'security' in deployment_components | default(selected_components)"
  tags: ["security"]
  block:
    - name: Deploy macOS security
      ansible.builtin.include_role:
        name: macos/security
      when: target_platform == "macos"

    - name: Deploy Ubuntu security
      ansible.builtin.include_role:
        name: ubuntu/security
      when: target_platform == "ubuntu"

- name: Deploy base system component
  when: "'base' in deployment_components | default(selected_components)"
  tags: ["base", "reboot", "stability"]
  block:
    - name: Deploy macOS base
      ansible.builtin.include_role:
        name: macos/base
      when: target_platform == "macos"

    - name: Deploy Ubuntu base
      ansible.builtin.include_role:
        name: ubuntu/base
      when: target_platform == "ubuntu"

    - name: Deploy OrangePi base
      ansible.builtin.include_role:
        name: orangepi/base
      when: target_platform == "orangepi"

- name: Deploy network component
  when: "'network' in deployment_components | default(selected_components)"
  tags: ["network"]
  block:
    - name: Deploy macOS network stack
      ansible.builtin.include_role:
        name: macos/network
      when: target_platform == "macos"

    - name: Deploy macOS Tailscale
      ansible.builtin.include_role:
        name: macos/network/tailscale
      when:
        - target_platform == "macos"
        - features.tailscale_configuration | default(false)

    - name: Deploy Ubuntu network
      ansible.builtin.include_role:
        name: ubuntu/network/tailscale
      when: target_platform == "ubuntu"

    - name: Deploy OrangePi Tailscale
      ansible.builtin.include_role:
        name: orangepi/network/tailscale
      when: target_platform == "orangepi"

- name: Deploy tailscale component (alias for network)
  when: "'tailscale' in deployment_components | default(selected_components)"
  tags: ["tailscale", "network"]
  block:
    - name: Deploy macOS Tailscale
      ansible.builtin.include_role:
        name: macos/network/tailscale
      when: target_platform == "macos"

    - name: Deploy Ubuntu Tailscale
      ansible.builtin.include_role:
        name: ubuntu/network/tailscale
      when: target_platform == "ubuntu"

    - name: Deploy OrangePi Tailscale
      ansible.builtin.include_role:
        name: orangepi/network/tailscale
      when: target_platform == "orangepi"

- name: Deploy shell enhancements component
  when: "'shell' in deployment_components | default(selected_components)"
  tags: ["shell", "zsh"]
  block:
    - name: Deploy shell_manager (common role)
      ansible.builtin.include_role:
        name: common/shell_manager
      when:
        - shell_manager_enabled | default(false)
        - target_platform in ["ubuntu", "debian", "macos"]

    - name: Deploy Ubuntu shell (legacy)
      ansible.builtin.include_role:
        name: ubuntu/shell
      when:
        - target_platform == "ubuntu"
        - not (shell_manager_enabled | default(false))

    - name: Deploy OrangePi shell
      ansible.builtin.include_role:
        name: orangepi/shell
      when: target_platform == "orangepi"

- name: Deploy SSH component
  ansible.builtin.include_role:
    name: macos/ssh
  when:
    - target_platform == "macos"
    - "'ssh' in deployment_components | default(selected_components)"
  tags: ["ssh"]

# macOS Application Components (after infrastructure is ready)

- name: Deploy Device API component (unified for all platforms)
  ansible.builtin.include_role:
    name: common/device_api
  vars:
    device_api_force_update: "{{ git_force_update | default(false) }}"
  when:
    - "'device-api' in deployment_components | default(selected_components)"
  tags: ["device-api", "api"]

- name: Deploy tracker component
  ansible.builtin.include_role:
    name: macos/tracker
  vars:
    tracker_force_update: "{{ git_force_update | default(false) }}"
  when:
    - target_platform == "macos"
    - "'tracker' in deployment_components | default(selected_components)"
  tags: ["tracker"]

- name: Deploy ALPR service component
  ansible.builtin.include_role:
    name: macos/alpr_service
  vars:
    alpr_force_update: "{{ git_force_update | default(false) }}"
  when:
    - target_platform == "macos"
    - "'alpr' in deployment_components | default(selected_components)"
  tags: ["alpr"]

- name: Deploy player component
  when: "'player' in deployment_components | default(selected_components)"
  tags: ["player"]
  block:
    - name: Deploy macOS player
      ansible.builtin.include_role:
        name: macos/player
      vars:
        player_force_update: "{{ git_force_update | default(false) }}"
      when: target_platform == "macos"

    - name: Deploy OrangePi player
      ansible.builtin.include_role:
        name: orangepi/player
      when: target_platform == "orangepi"

- name: Deploy CamGuard component
  ansible.builtin.include_role:
    name: macos/camguard
  vars:
    camguard_force_update: "{{ git_force_update | default(false) }}"
  when:
    - target_platform == "macos"
    - "'camguard' in deployment_components | default(selected_components)"
  tags: ["camguard"]

- name: Deploy MediaMTX Demo component
  ansible.builtin.include_role:
    name: macos/mediamtx_demo
  when:
    - target_platform == "macos"
    - "'mediamtx_demo' in deployment_components | default(selected_components)"
  tags: ["mediamtx-demo"]

- name: Deploy Cursorcerer component
  ansible.builtin.include_role:
    name: macos/cursorcerer
  when:
    - target_platform == "macos"
    - "'cursorcerer' in deployment_components | default(selected_components)"
  tags: ["cursorcerer"]

# Parking Monitor Component - Deployed First (if enabled)
- name: Deploy staging video feed component (before parking monitor)
  ansible.builtin.include_role:
    name: macos/staging_video_feed
  vars:
    staging_video_feed_force_update: "{{ git_force_update | default(false) }}"
  when:
    - target_platform == "macos"
    - "('parking-monitor' in deployment_components | default(selected_components)) or ('staging-video-feed' in deployment_components | default(selected_components))"
    - deployment_environment == "staging"
  tags: ["staging-video-feed", "parking-monitor", "staging"]

- name: Deploy parking monitor component
  ansible.builtin.include_role:
    name: macos/parking_monitor
  vars:
    parking_monitor_force_update: "{{ git_force_update | default(false) }}"
  when:
    - target_platform == "macos"
    - "'parking-monitor' in deployment_components | default(selected_components)"
  tags: ["parking-monitor"]

# Ubuntu-specific components
- name: Deploy Docker component
  ansible.builtin.include_role:
    name: ubuntu/docker
  when:
    - target_platform == "ubuntu"
    - "'docker' in deployment_components | default(selected_components)"
  tags: ["docker"]

# Modern NVIDIA Installation - PPA + CUDA Keyring Approach
- name: Install NVIDIA Driver 570-server + CUDA 12.8 (Modern Workflow)
  ansible.builtin.include_tasks: ../roles/ubuntu/ml_workstation/tasks/nvidia_setup_modern.yml
  when:
    - target_platform == "ubuntu"
    - "'nvidia' in deployment_components | default(selected_components)"
  tags: ["nvidia", "gpu", "cuda", "ml"]

- name: Deploy ML workstation component
  ansible.builtin.include_role:
    name: ubuntu/ml_workstation
  when:
    - target_platform == "ubuntu"
    - "'ml' in deployment_components | default(selected_components)"
  tags: ["ml"]

- name: Deploy monitoring component
  when: "'monitoring' in deployment_components | default(selected_components)"
  tags: ["monitoring"]
  block:
    - name: Deploy Ubuntu monitoring
      ansible.builtin.include_role:
        name: ubuntu/monitoring
      when: target_platform == "ubuntu"

    - name: Deploy OrangePi monitoring
      ansible.builtin.include_role:
        name: orangepi/monitoring
      when: target_platform == "orangepi"

# GPU Health Check is now integrated into the ML workstation role verification tasks

# oaSentinel Components
- name: Deploy oaSentinel setup
  ansible.builtin.include_role:
    name: ubuntu/ml_workstation
  when:
    - target_platform == "ubuntu"
    - "'oasentinel-setup' in deployment_components | default(selected_components) or 'oasentinel-full' in deployment_components | default(selected_components)"
  tags: ["oasentinel-setup", "oasentinel-full"]

- name: Deploy oaSentinel data preparation
  ansible.builtin.include_role:
    name: ubuntu/ml_workstation
  when:
    - target_platform == "ubuntu"
    - "'oasentinel-data' in deployment_components | default(selected_components) or 'oasentinel-full' in deployment_components | default(selected_components)"
  tags: ["oasentinel-data", "oasentinel-full"]

- name: Deploy oaSentinel training
  ansible.builtin.include_role:
    name: ubuntu/ml_workstation
  when:
    - target_platform == "ubuntu"
    - "'oasentinel-train' in deployment_components | default(selected_components) or 'oasentinel-full' in deployment_components | default(selected_components)"
  tags: ["oasentinel-train", "oasentinel-full"]

# Storage Server Component
- name: Deploy storage server component
  ansible.builtin.include_role:
    name: ubuntu/storage_server
  when:
    - target_platform == "ubuntu"
    - "'storage' in deployment_components | default(selected_components)"
  tags: ["storage", "storage-server"]

- name: Component deployment summary
  ansible.builtin.debug:
    msg: |
      Component Deployment Completed:
      - Platform: {{ target_platform }}
      - Components: {{ deployment_components | default(selected_components) | join(', ') }}
      - Host: {{ inventory_hostname }}
