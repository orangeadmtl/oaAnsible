---
# Platform Detection Tasks
# Automatically detects target platform and sets appropriate variables

- name: Debug platform detection info
  ansible.builtin.debug:
    msg: |
      Platform Detection Results:
      - OS Family: {{ ansible_os_family }}
      - Distribution: {{ ansible_distribution }}
      - Distribution Version: {{ ansible_distribution_version }}
      - Architecture: {{ ansible_architecture }}
      - System: {{ ansible_system }}
      - Machine: {{ ansible_machine }}
  when: platform_detection_debug | default(false)

- name: Detect macOS platform
  ansible.builtin.set_fact:
    detected_platform: "macos"
    platform_capabilities:
      - "gui"
      - "launchd"
      - "homebrew"
      - "device-api"
      - "tracker"
      - "alpr"
  when: ansible_os_family == "Darwin" or ansible_system == "Darwin" or ansible_distribution == "MacOSX"
  tags: ["always"]

- name: Detect Ubuntu/Debian platform
  ansible.builtin.set_fact:
    detected_platform: "ubuntu"
    platform_capabilities:
      - "systemd"
      - "apt"
      - "docker"
      - "server"
      - "shell"
  when: 
    - ansible_distribution in ["Ubuntu", "Debian"]
    - ansible_architecture != "aarch64"
  tags: ["always"]

- name: Detect OrangePi platform (Ubuntu ARM64)
  ansible.builtin.set_fact:
    detected_platform: "orangepi"
    platform_capabilities:
      - "systemd"
      - "apt"
      - "opi-setup"
      - "player"
      - "display"
      - "embedded"
  when: 
    - ansible_distribution == "Ubuntu"
    - ansible_architecture == "aarch64"
    - platform_type is defined and platform_type == "orangepi"  # Explicit platform detection from inventory
  tags: ["always"]

- name: Check for platform_type override from inventory
  ansible.builtin.set_fact:
    detected_platform: >-
      {%- if platform_type == "debian" -%}
        ubuntu
      {%- elif platform_type in ["ubuntu", "macos", "orangepi"] -%}
        {{ platform_type }}
      {%- endif -%}
    platform_capabilities:
      - "systemd"
      - "apt"
      - "docker"
      - "server"
      - "shell"
  when: 
    - detected_platform is not defined
    - platform_type is defined
    - platform_type in ["debian", "ubuntu", "macos", "orangepi"]
  tags: ["always"]

- name: Fallback platform detection using command
  ansible.builtin.shell: |
    if [ -d "/Applications" ] && [ -d "/System" ]; then
      echo "macos"
    elif [ -f "/etc/os-release" ]; then
      echo "ubuntu"
    else
      echo "unknown"
    fi
  register: fallback_platform_detection
  changed_when: false
  when: detected_platform is not defined
  tags: ["always"]

- name: Set fallback platform from command detection
  ansible.builtin.set_fact:
    detected_platform: "{{ fallback_platform_detection.stdout }}"
    platform_capabilities:
      - "gui"
      - "launchd"
      - "homebrew"
      - "device-api"
      - "tracker"
      - "alpr"
  when:
    - detected_platform is not defined
    - fallback_platform_detection.stdout == "macos"
  tags: ["always"]

- name: Set fallback platform for unrecognized systems
  ansible.builtin.set_fact:
    detected_platform: "generic"
    platform_capabilities:
      - "basic"
  when: detected_platform is not defined
  tags: ["always"]

- name: Display detected platform
  ansible.builtin.debug:
    msg: |
      Detected Platform: {{ detected_platform }}
      Capabilities: {{ platform_capabilities | join(', ') }}

- name: Fail if platform is unsupported
  ansible.builtin.fail:
    msg: |
      Unsupported platform detected: {{ detected_platform }}
      This playbook supports: macOS, Ubuntu, OrangePi (Ubuntu ARM64)
      Detected system: {{ ansible_distribution }} {{ ansible_distribution_version }} ({{ ansible_architecture }})
  when: detected_platform == "generic"
