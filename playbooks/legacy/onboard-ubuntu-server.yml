---
# Ubuntu Server Onboarding Playbook with Intelligent Configuration Checks
# This playbook configures Ubuntu servers for the OrangeAd infrastructure
# with smart detection to skip already-configured components

- name: Onboard Ubuntu Server
  hosts: "{{ target_host | default('ubuntu_servers') }}"
  gather_facts: true
  become: false
  vars_files:
    - ../group_vars/all/vault.yml

  pre_tasks:
    - name: Display onboarding start banner
      ansible.builtin.debug:
        msg: |
          ═══════════════════════════════════════════════════════════
            Ubuntu Server Onboarding Started
          ═══════════════════════════════════════════════════════════
          Target: {{ inventory_hostname }} ({{ ansible_host }})
          User: {{ ansible_user }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}

          This playbook will intelligently configure only what's needed:
          [OK] Base system configuration
          [OK] Security hardening (sudo, SSH, firewall)
          [OK] Shell enhancement (zsh with bash compatibility)
          [OK] NVIDIA drivers (if GPU detected)
          [OK] Tailscale VPN with subnet routing

          Already-configured components will be skipped automatically.
          ═══════════════════════════════════════════════════════════

    - name: Verify connection to target
      ansible.builtin.ping:

    - name: Gather comprehensive system information
      ansible.builtin.setup:
        gather_subset:
          - "all"

    - name: Verify Ubuntu distribution
      ansible.builtin.assert:
        that:
          - ansible_distribution == "Ubuntu"
        fail_msg: "This playbook is designed for Ubuntu systems only"
        success_msg: "[OK] Ubuntu {{ ansible_distribution_version }} detected and compatible"

    - name: Display system information
      ansible.builtin.debug:
        msg: |
          System Information:
          - Hostname: {{ ansible_hostname }}
          - Architecture: {{ ansible_architecture }}
          - Kernel: {{ ansible_kernel }}
          - Memory: {{ (ansible_memtotal_mb / 1024) | round(1) }}GB
          - CPU cores: {{ ansible_processor_vcpus }}
          - Primary IP: {{ ansible_default_ipv4.address }}

  roles:
    - role: ubuntu/base
      tags: ["base", "system"]
      vars:
        base_role_name: "Base System Configuration"

    - role: ubuntu/security
      tags: ["security", "sudo", "ssh"]
      vars:
        security_role_name: "Security Hardening"

    - role: ubuntu/shell
      tags: ["shell", "zsh", "enhancement"]
      vars:
        shell_role_name: "Shell Enhancement (Zsh)"

    - role: ubuntu/nvidia
      tags: ["nvidia", "drivers", "gpu"]
      vars:
        nvidia_role_name: "NVIDIA Driver Configuration"

    - role: ubuntu/server_optimization
      tags: ["optimization", "performance", "ethernet"]
      vars:
        server_optimization_role_name: "Server Optimization (including Ethernet)"

    - role: ubuntu/network/tailscale
      tags: ["network", "tailscale"]
      vars:
        tailscale_role_name: "Tailscale VPN Setup"

    - role: ubuntu/python
      tags: ["python", "ml", "development"]
      vars:
        python_role_name: "Python Development Environment"
      when: setup_ml_environment | default(false)

    - role: common/ml_workstation
      tags: ["ml", "workstation"]
      vars:
        ml_workstation_role_name: "ML Workstation (Common Components)"
      when: setup_ml_environment | default(false)

    - role: ubuntu/ml_workstation
      tags: ["ml", "ubuntu", "workstation"]
      vars:
        ml_workstation_role_name: "Ubuntu ML Workstation Setup"
      when: setup_ml_environment | default(false)

  post_tasks:
    - name: Check if any reboots are required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Verify ML environment setup
      ansible.builtin.shell: |
        if [ -d "{{ ansible_user_dir }}/oaSentinel" ]; then
          cd "{{ ansible_user_dir }}/oaSentinel"
          if [ -f ".venv/bin/activate" ]; then
            source .venv/bin/activate
            python -c "import torch; print(f'PyTorch CUDA: {torch.cuda.is_available()}')"
            echo "[OK] oaSentinel environment ready"
          else
            echo "[WARNING] Virtual environment not found"
          fi
        else
          echo "[WARNING] oaSentinel not installed"
        fi
      register: ml_environment_check
      become: false
      changed_when: false
      become_user: "{{ ansible_user }}"
      when: setup_ml_environment | default(false)
      ignore_errors: true

    - name: Display completion banner
      ansible.builtin.debug:
        msg: |
          ═══════════════════════════════════════════════════════════
          [SUCCESS] Ubuntu Server Onboarding Completed Successfully!
          ═══════════════════════════════════════════════════════════

          Server: {{ inventory_hostname }} ({{ ansible_host }})

            Configuration Summary:
          ├─ Base System: Essential packages and user setup
          ├─ Security: Passwordless sudo, SSH hardening, firewall
          ├─ Shell: Zsh with Oh My Zsh (bash-compatible)
          ├─ Optimization: Performance tuning and ethernet stability
          ├─ NVIDIA: {{ 'Drivers configured' if ansible_lspci is search('NVIDIA') else 'No GPU detected' }}
          ├─ Tailscale: VPN with subnet routing (192.168.1.0/24)
          {% if setup_ml_environment | default(false) %}
          └─ ML Environment: Python, PyTorch, oaSentinel ready for AI training
          {% else %}
          └─ ML Environment: Not configured (use -t ml for ML workstation setup)
          {% endif %}

          [LINK] Access Information:
          • SSH: ssh {{ ansible_user }}@{{ ansible_host }}
          • Tailscale: Connected with tags [tag:oa-server, tag:oa-ubuntu]
          • Shell: Enhanced zsh with your custom aliases
          {% if setup_ml_environment | default(false) %}
          • ML Environment: {{ ml_environment_check.stdout | default('Environment check not run') }}
          {% endif %}

            Your Custom Aliases Available:
          • ls, l, la, ll, lsa → Modern directory listing with lsd
          • lt → Tree view with lsd --tree
          • All bash scripts remain fully compatible!

          {{ 'WARNING:  REBOOT REQUIRED for NVIDIA drivers' if reboot_required.stat.exists else '  No reboot required' }}

          {% if setup_ml_environment | default(false) %}
            Ready for AI model training with oaSentinel!
          {% else %}
            Ready for OrangeAd infrastructure operations!
          {% endif %}
          ═══════════════════════════════════════════════════════════
