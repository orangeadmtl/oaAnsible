---
# Ubuntu ML Training Server Onboarding Playbook
# Sets up oaSentinel ML training environment on Ubuntu servers

- name: Setup Ubuntu ML Training Server
  hosts: ubuntu
  gather_facts: true
  become: true

  vars:
    # Role execution control
    execute_base_setup: true
    execute_nvidia_setup: true
    execute_docker_setup: true
    execute_ml_setup: true
    execute_monitoring_setup: true

    # Server configuration
    is_gpu_server: true
    enable_remote_access: true

  pre_tasks:
    - name: Verify Ubuntu platform
      ansible.builtin.fail:
        msg: "This playbook is designed for Ubuntu hosts only"
      when: ansible_distribution != "Ubuntu"
      tags: [always]

    - name: Check Ubuntu version compatibility
      ansible.builtin.fail:
        msg: "Ubuntu 18.04+ required, found {{ ansible_distribution_version }}"
      when: ansible_distribution_version is version('18.04', '<')
      tags: [always]

    - name: Display setup information
      ansible.builtin.debug:
        msg:
          - "[LAUNCH] Setting up Ubuntu ML Training Server"
          - "Host: {{ inventory_hostname }}"
          - "Distribution: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "Architecture: {{ ansible_architecture }}"
          - "User: {{ ansible_user }}"
          - "GPU Server: {{ is_gpu_server }}"
      tags: [always]

    - name: Check for NVIDIA GPU
      ansible.builtin.shell: |
        set -o pipefail
        lspci | grep -i nvidia
      register: nvidia_gpu_check
      failed_when: false
      changed_when: false
      tags: [always]

    - name: GPU detection results
      ansible.builtin.debug:
        msg: "{{ 'NVIDIA GPU detected - GPU acceleration will be configured' if nvidia_gpu_check.rc == 0 else 'No NVIDIA GPU found - CPU-only setup' }}"
      tags: [always]

    - name: Check available disk space
      ansible.builtin.shell: set -o pipefail && df -h / | tail -1 | awk '{print $4}' | sed 's/G//'
      register: disk_space
      changed_when: false
      tags: [always]

    - name: Verify sufficient disk space
      ansible.builtin.fail:
        msg: "Insufficient disk space. Need at least 50GB free for ML server, found {{ disk_space.stdout }}G"
      when: disk_space.stdout | int < 50
      tags: [always]

  tasks:
    - name: Update system packages
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        autoremove: true
      tags: [system, update]

    - name: Setup Ubuntu base environment
      ansible.builtin.include_role:
        name: ubuntu/base
      when: execute_base_setup
      tags: [base, setup]

    - name: Setup NVIDIA drivers and CUDA
      ansible.builtin.include_role:
        name: ubuntu/nvidia
      when: execute_nvidia_setup and nvidia_gpu_check.rc == 0
      tags: [nvidia, gpu, setup]

    - name: Setup Docker with GPU support
      ansible.builtin.include_role:
        name: ubuntu/docker
      when: execute_docker_setup
      tags: [docker, setup]

    - name: Setup Python development environment
      ansible.builtin.include_role:
        name: ubuntu/python
      tags: [python, setup]

    - name: Setup ML workstation (common components)
      ansible.builtin.include_role:
        name: common/ml_workstation
      tags: [ml, setup]

    - name: Setup Ubuntu-specific ML optimizations
      ansible.builtin.include_role:
        name: ubuntu/ml_workstation
      tags: [ml, ubuntu, setup]

    - name: Setup system monitoring
      ansible.builtin.include_role:
        name: ubuntu/monitoring
      when: execute_monitoring_setup
      tags: [monitoring, setup]

    - name: Configure security settings
      ansible.builtin.include_role:
        name: ubuntu/security
      tags: [security, setup]

  post_tasks:
    - name: Reboot system if required
      ansible.builtin.reboot:
        reboot_timeout: 300
      when: nvidia_gpu_check.rc == 0 and execute_nvidia_setup
      tags: [reboot]

    - name: Wait for system to come back online
      ansible.builtin.wait_for_connection:
        timeout: 300
      when: nvidia_gpu_check.rc == 0 and execute_nvidia_setup
      tags: [reboot]

    - name: Run post-reboot verification
      ansible.builtin.shell: |
        nvidia-smi || echo "GPU drivers not ready"
        cd "{{ oasentinel_install_dir }}"
        source .venv/bin/activate
        python -c '
          import torch
          print("PyTorch version:", torch.__version__)
          print("CUDA available:", torch.cuda.is_available())
          if torch.cuda.is_available():
            print("GPU count:", torch.cuda.device_count())
            for i in range(torch.cuda.device_count()):
              print("  GPU", i, ":", torch.cuda.get_device_name(i))
        ' 2>/dev/null || echo "PyTorch/CUDA verification failed"
      become: true
      become_user: "{{ ansible_user }}"
      changed_when: false
      failed_when: false
      when: nvidia_gpu_check.rc == 0
      tags: [verify]
      register: ml_verification

    - name: Run final ML environment verification
      ansible.builtin.shell: |
        cd "{{ oasentinel_install_dir }}"
        source .venv/bin/activate
        python src/cli.py info
        python scripts/ml_health_check.sh
      become: true
      become_user: "{{ ansible_user }}"
      register: final_verification
      changed_when: false
      tags: [verify]

    - name: Create completion marker
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.ml_server_setup_complete"
        state: touch
        owner: "{{ ansible_user }}"
        mode: "0644"
      tags: [setup]

    - name: Setup completion summary
      ansible.builtin.debug:
        msg:
          - "[SUCCESS] Ubuntu ML Training Server Setup Complete!"
          - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          - "[FILES] oaSentinel: {{ oasentinel_install_dir }}"
          - "[LAUNCH] Platform: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "[GPU] GPU Support: {{ 'Enabled' if nvidia_gpu_check.rc == 0 else 'CPU Only' }}"
          - "[DOCKER] Docker: {{ 'Enabled' if execute_docker_setup else 'Disabled' }}"
          - "[STATS] Monitoring: {{ 'Enabled' if execute_monitoring_setup else 'Disabled' }}"
          - ""
          - "[CONFIG] Server Access:"
          - "  • SSH: ssh {{ ansible_user }}@{{ inventory_hostname }}"
          - "  • Jupyter: http://{{ inventory_hostname }}:8888 (if enabled)"
          - ""
          - "[LAUNCH] Quick Start Commands:"
          - "  • Check status: mlstatus"
          - "  • Monitor GPU: gpu-watch"
          - "  • Start training: train-gpu"
          - "  • Screen session: train-screen"
          - ""
          - "[DOCS] Next Steps:"
          - "  1. Download dataset: mlcli download --dataset crowdhuman"
          - "  2. Process data: mlprocess"
          - "  3. Start GPU training: train-gpu"
          - "  4. Monitor with: gpu-watch"
          - ""
          - "[TIPS] For help: mlcli --help"
      tags: [summary]

  handlers:
    - name: Restart networking
      ansible.builtin.service:
        name: networking
        state: restarted

    - name: Source bash configuration
      ansible.builtin.command: source {{ ansible_user_dir }}/.bashrc
      become: true
      become_user: "{{ ansible_user }}"
      changed_when: false
      failed_when: false
