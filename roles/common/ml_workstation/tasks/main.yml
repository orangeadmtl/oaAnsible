---
# ML Workstation Common Tasks
# Tasks that apply to both Ubuntu and macOS ML environments

- name: Include platform-specific variables
  ansible.builtin.include_vars: "{{ ansible_os_family | lower }}.yml"
  failed_when: false
  tags: [always]

- name: Ensure user directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    mode: "0755"
  loop:
    - "{{ ansible_user_dir }}/orangead"
    - "{{ oasentinel_data_dir }}"
    - "{{ oasentinel_models_dir }}"
    - "{{ oasentinel_logs_dir }}"
  tags: [setup, directories]

- name: Check if oaSentinel repository exists
  ansible.builtin.stat:
    path: "{{ oasentinel_install_dir }}/.git"
  register: oasentinel_repo_check
  tags: [setup, git]

- name: Clone oaSentinel repository
  ansible.builtin.git:
    repo: "{{ oasentinel_repo_url }}"
    dest: "{{ oasentinel_install_dir }}"
    version: "{{ oasentinel_repo_branch }}"
    force: false
  become: true
  become_user: "{{ ansible_user }}"
  when: not oasentinel_repo_check.stat.exists
  failed_when: false
  tags: [setup, git]

- name: Update existing oaSentinel repository
  ansible.builtin.git:
    repo: "{{ oasentinel_repo_url }}"
    dest: "{{ oasentinel_install_dir }}"
    version: "{{ oasentinel_repo_branch }}"
    force: true
  become: true
  become_user: "{{ ansible_user }}"
  when: oasentinel_repo_check.stat.exists
  failed_when: false
  tags: [update, git]

- name: Ensure oaSentinel directory exists (fallback)
  ansible.builtin.file:
    path: "{{ oasentinel_install_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    mode: "0755"
  when: not oasentinel_repo_check.stat.exists
  tags: [setup, fallback]

- name: Set correct ownership for oaSentinel directory
  ansible.builtin.file:
    path: "{{ oasentinel_install_dir }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: true
  tags: [setup, permissions]

- name: Make oaSentinel scripts executable
  ansible.builtin.file:
    path: "{{ item }}"
    mode: "0755"
  loop:
    - "{{ oasentinel_install_dir }}/setup.sh"
    - "{{ oasentinel_install_dir }}/scripts/download_data.sh"
    - "{{ oasentinel_install_dir }}/scripts/process_data.sh"
    - "{{ oasentinel_install_dir }}/scripts/train.sh"
    - "{{ oasentinel_install_dir }}/scripts/evaluate.sh"
    - "{{ oasentinel_install_dir }}/scripts/export.sh"
  failed_when: false
  tags: [setup, permissions]

- name: Check if virtual environment exists
  ansible.builtin.stat:
    path: "{{ python_venv_dir }}/bin/activate"
  register: venv_check
  changed_when: false
  tags: [setup, python]

- name: Setup oaSentinel Python environment
  ansible.builtin.shell: |
    cd "{{ oasentinel_install_dir }}"
    ./setup.sh --gpu {{ '--dev' if dev_tools.enable_code_formatting else '' }}
  become: true
  become_user: "{{ ansible_user }}"
  environment:
    PATH: "{{ ansible_env.PATH }}"
    HOME: "{{ ansible_user_dir }}"
  when: not venv_check.stat.exists
  register: setup_result
  failed_when: setup_result.rc != 0
  changed_when: false
  tags: [setup, python, environment]

- name: Verify oaSentinel installation
  ansible.builtin.shell: |
    cd "{{ oasentinel_install_dir }}"
    source .venv/bin/activate
    python -c "
    import torch
    import ultralytics
    import cv2
    from src.data_processing.crowdhuman import CrowdHumanProcessor
    print('[OK] All dependencies verified')
    print(f'PyTorch: {torch.__version__}')
    print(f'CUDA available: {torch.cuda.is_available()}')
    {% if ansible_os_family == 'Darwin' %}
    print(f'MPS available: {torch.backends.mps.is_available()}')
    {% endif %}
    "
  become: true
  become_user: "{{ ansible_user }}"
  environment:
    PATH: "{{ ansible_env.PATH }}"
    HOME: "{{ ansible_user_dir }}"
  register: verification_result
  failed_when: verification_result.rc != 0
  changed_when: false
  tags: [verify, python]

- name: Display verification results
  ansible.builtin.debug:
    msg: "{{ verification_result.stdout_lines }}"
  when: verification_result is defined
  tags: [verify]

- name: Create ML development aliases
  ansible.builtin.blockinfile:
    path: "{{ ansible_user_dir }}/.zshrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - ML Workstation"
    block: |
      # oaSentinel ML Development Aliases
      export OASENTINEL_HOME="{{ oasentinel_install_dir }}"
      alias cdml="cd $OASENTINEL_HOME"
      alias mltrain="cd $OASENTINEL_HOME && source .venv/bin/activate && ./scripts/train.sh"
      alias mlprocess="cd $OASENTINEL_HOME && source .venv/bin/activate && ./scripts/process_data.sh"
      alias mleval="cd $OASENTINEL_HOME && source .venv/bin/activate && ./scripts/evaluate.sh"
      alias mlexport="cd $OASENTINEL_HOME && source .venv/bin/activate && ./scripts/export.sh"
      alias mlstatus="cd $OASENTINEL_HOME && source .venv/bin/activate && python src/cli.py status"
      alias mlcli="cd $OASENTINEL_HOME && source .venv/bin/activate && python src/cli.py"

      # ML Development Functions
      mlvenv() { cd $OASENTINEL_HOME && source .venv/bin/activate; }
      mllog() { tail -f $OASENTINEL_HOME/logs/training/*.log 2>/dev/null || echo "No training logs found"; }
      mlmodels() { ls -la $OASENTINEL_HOME/models/checkpoints/ 2>/dev/null || echo "No models found"; }

    create: true
    mode: "0644"
  become: true
  become_user: "{{ ansible_user }}"
  when: create_dev_aliases
  tags: [setup, aliases]

- name: Create ML workspace info file
  ansible.builtin.template:
    src: ml_info.txt.j2
    dest: "{{ oasentinel_install_dir }}/ML_WORKSPACE_INFO.txt"
    owner: "{{ ansible_user }}"
    mode: "0644"
  tags: [setup, documentation]

- name: Install ML monitoring script
  ansible.builtin.template:
    src: ml_health_check.sh.j2
    dest: "{{ oasentinel_install_dir }}/scripts/ml_health_check.sh"
    owner: "{{ ansible_user }}"
    mode: "0755"
  when: enable_health_checks
  tags: [setup, monitoring]

- name: Run initial health check
  ansible.builtin.command: "{{ oasentinel_install_dir }}/scripts/ml_health_check.sh"
  become: true
  become_user: "{{ ansible_user }}"
  register: health_check_result
  changed_when: false
  failed_when: false
  when: enable_health_checks
  tags: [verify, health]

- name: Display health check results
  ansible.builtin.debug:
    msg: "{{ health_check_result.stdout_lines }}"
  when: health_check_result is defined and enable_health_checks
  tags: [verify, health]

- name: Final setup summary
  ansible.builtin.debug:
    msg:
      - "[TARGET] oaSentinel ML workstation setup complete!"
      - "[FILES] Installation: {{ oasentinel_install_dir }}"
      - "[PYTHON] Python environment: {{ python_venv_dir }}"
      - "[CONFIG] Use 'mlcli' command for CLI access"
      - "[STATS] Use 'mlstatus' to check system status"
      - "[LAUNCH] Ready for ML training and development!"
  tags: [setup, summary]
