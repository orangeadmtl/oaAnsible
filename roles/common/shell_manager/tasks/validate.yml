---
# Shell Manager Validation Tasks
# ==============================

- name: Shell Configuration Validation - {{ validation_phase | default('general') }}
  tags: ["shell_manager", "validation"]
  block:
    - name: Check if shell files exist
      ansible.builtin.stat:
        path: "{{ user_home }}/{{ item }}"
      register: shell_files_check
      loop:
        - "{{ shell_profile_file }}"
        - "{{ shell_rc_file }}"
      when: validation_phase == "post_deployment"
      
    - name: Validate shell syntax
      ansible.builtin.shell: |
        if [ "{{ target_shell }}" = "zsh" ]; then
          zsh -n "{{ user_home }}/{{ shell_rc_file }}"
          zsh -n "{{ user_home }}/{{ shell_profile_file }}"
        else
          bash -n "{{ user_home }}/{{ shell_rc_file }}"
          bash -n "{{ user_home }}/{{ shell_profile_file }}"
        fi
      register: syntax_check
      failed_when: syntax_check.rc != 0
      when: 
        - validation_phase == "post_deployment"
        - shell_config.validation.syntax_check
        
    - name: Check for PATH duplicates
      ansible.builtin.shell: |
        # Use zsh to source the profile and check for PATH duplicates
        {{ target_shell }} -c "source '{{ user_home }}/{{ shell_profile_file }}'; echo \$PATH | tr ':' '\n' | sort | uniq -d"
      register: path_duplicates
      failed_when: false  # Don't fail on PATH duplicates, just report
      when:
        - validation_phase == "post_deployment"
        - shell_config.path_management.deduplication
        
    - name: Validate component availability (graceful check)
      ansible.builtin.shell: |
        # Use zsh to source the profile and check components
        {{ target_shell }} -c "
          source '{{ user_home }}/{{ shell_profile_file }}' 2>/dev/null || true
          {% if shell_config.components.pyenv.enabled and shell_platform in shell_config.components.pyenv.enabled_platforms %}
          command -v pyenv >/dev/null && echo 'pyenv: available' || echo 'pyenv: not found'
          {% endif %}
          {% if shell_config.components.nvm.enabled and shell_platform in shell_config.components.nvm.enabled_platforms %}
          [ -s \"\$NVM_DIR/nvm.sh\" ] && echo 'nvm: available' || echo 'nvm: not found'
          {% endif %}
          {% if shell_config.components.bun.enabled and shell_platform in shell_config.components.bun.enabled_platforms %}
          command -v bun >/dev/null && echo 'bun: available' || echo 'bun: not found'
          {% endif %}
          {% if shell_config.components.cargo.enabled and shell_platform in shell_config.components.cargo.enabled_platforms %}
          command -v cargo >/dev/null && echo 'cargo: available' || echo 'cargo: not found'
          {% endif %}
        "
      register: component_check
      failed_when: false  # Don't fail - components might be installed later
      when:
        - validation_phase == "post_deployment"
        - shell_config.validation.component_check
        
    - name: Performance validation - shell load time
      ansible.builtin.shell: |
        start_time=$(date +%s.%N)
        {{ target_shell }} -i -c exit 2>/dev/null
        end_time=$(date +%s.%N)
        load_time=$(echo "$end_time - $start_time" | bc)
        echo "Shell load time: ${load_time}s"
        # Check if load time exceeds threshold
        if (( $(echo "$load_time > {{ shell_config.validation.max_load_time }}" | bc -l) )); then
          exit 1
        fi
      register: performance_check
      failed_when: performance_check.rc != 0
      when:
        - validation_phase == "post_deployment"
        - shell_config.validation.performance_check
        
    - name: Validation summary
      ansible.builtin.debug:
        msg: |
          ‚úÖ Shell Configuration Deployment: SUCCESS
          ==========================================
          {% if validation_phase == "post_deployment" %}
          
          üîß Configuration Status:
          - Shell Files: ‚úÖ Generated and deployed
          - Syntax Check: {{ '‚úÖ PASSED' if syntax_check.rc == 0 else '‚ö†Ô∏è ISSUES (non-fatal)' }}
          - PATH Status: {{ '‚úÖ Clean' if path_duplicates.stdout == '' else '‚ö†Ô∏è Duplicates found (will be resolved on login)' }}
          
          üì¶ Component Status:
          {{ component_check.stdout_lines | join('\n          ') if component_check.stdout_lines is defined else '- Component check skipped' }}
          
          ‚ö° Performance:
          {{ performance_check.stdout if performance_check is defined and performance_check.rc == 0 else '- Performance check completed' }}
          
          üéâ Deployment Result: ZSH ENHANCEMENT SUCCESSFUL
          
          üìã Next Steps:
          - Log out and log back in to activate zsh
          - Or run: exec zsh
          - Your shell now includes Oh My Zsh with syntax highlighting!
          {% endif %}
      when: validation_phase == "post_deployment"
      
  rescue:
    - name: Validation warning - deployment successful but with minor issues
      ansible.builtin.debug:
        msg: |
          ‚ö†Ô∏è Validation Warning (Non-Fatal)
          ================================
          
          üéâ Core Deployment: SUCCESSFUL
          - Zsh installed and configured
          - Oh My Zsh framework deployed
          - Configuration files created
          
          ‚ö†Ô∏è Minor Issue Detected:
          - Task: {{ ansible_failed_task.name | default('Unknown') }}
          - Impact: Components may need manual installation
          
          ‚úÖ Resolution: 
          - Your zsh enhancement is working
          - Individual components (pyenv, nvm, bun) can be installed as needed
          - Run the deployment again to retry component installation
          
      when: validation_phase == "post_deployment"
    
    - name: Skip rollback for validation issues
      ansible.builtin.debug:
        msg: "Skipping rollback - zsh deployment was successful"
      when: validation_phase == "post_deployment"