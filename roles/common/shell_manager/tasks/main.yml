---
# Shell Manager Main Tasks
# ========================

- name: Shell Manager - Platform Detection and Validation
  tags: ["shell_manager", "always"]
  block:
    - name: Detect current platform
      ansible.builtin.set_fact:
        detected_platform: >-
          {%- if ansible_os_family == "Darwin" -%}
            macos
          {%- elif ansible_os_family == "Debian" and "orangepi" in inventory_hostname | lower -%}
            orangepi
          {%- elif ansible_os_family in ["Debian", "RedHat"] -%}
            ubuntu
          {%- else -%}
            unsupported
          {%- endif -%}
      
    - name: Validate platform support
      ansible.builtin.fail:
        msg: |
          Platform '{{ detected_platform }}' is not supported by shell_manager.
          Supported platforms: {{ shell_manager.supported_platforms | join(', ') }}
      when: detected_platform not in shell_manager.supported_platforms
      
    - name: Set platform-specific facts
      ansible.builtin.set_fact:
        shell_platform: "{{ detected_platform }}"
        target_shell: "{{ shell_manager.platform_shells[detected_platform] }}"
        shell_rc_file: ".{{ shell_manager.platform_shells[detected_platform] }}rc"
        shell_profile_file: ".zprofile"  # All platforms use zsh now
        user_home: "{{ ansible_env.HOME }}"
        
    - name: Merge shell configuration with overrides
      ansible.builtin.set_fact:
        shell_config: "{{ shell_manager | combine(shell_manager_overrides | default({}), recursive=True) }}"

- name: Shell Manager - Zsh Installation and Setup
  ansible.builtin.include_tasks: zsh_setup.yml
  tags: ["shell_manager", "zsh", "setup"]

- name: Shell Manager - Pre-deployment Validation
  ansible.builtin.include_tasks: validate.yml
  vars:
    validation_phase: "pre_deployment"
  tags: ["shell_manager", "validation"]

- name: Shell Manager - Backup Current Configuration
  ansible.builtin.include_tasks: backup.yml
  tags: ["shell_manager", "backup"]

- name: Shell Manager - Deploy Configuration
  ansible.builtin.include_tasks: deploy.yml
  tags: ["shell_manager", "deploy"]

- name: Shell Manager - Post-deployment Validation
  ansible.builtin.include_tasks: validate.yml
  vars:
    validation_phase: "post_deployment"
  tags: ["shell_manager", "validation"]
  
- name: Shell Manager - Cleanup Temporary Files
  ansible.builtin.file:
    path: "{{ user_home }}/{{ item }}"
    state: absent
  loop:
    - ".shell_manager_temp"
    - "zshrc_enhancement.sh"  # Remove legacy script
  changed_when: false
  tags: ["shell_manager", "cleanup"]