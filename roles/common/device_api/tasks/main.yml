---
# Unified Device API Deployment Role - Improved
# Ensures complete deployment refresh on every run

- name: Deploy unified Device API (always update everything)
  when: platform_state.is_supported
  tags: ["device-api", "api"]
  block:
    - name: Set device API deployment path and force update flag
      ansible.builtin.set_fact:
        device_api_path: "{{ ansible_user_dir }}/orangead/oaDeviceAPI"
        device_api_service_name: "{{ 'com.orangead.deviceapi' if platform_state.is_macos else 'orangead-deviceapi' }}"
        device_api_python: "{{ ansible_python.executable | default('/usr/bin/python3') }}"
        # Intelligent update strategy - only update when needed for better performance
        device_api_force_update: "{{ device_api_force_update | default(false) }}"
        device_api_force_service_restart: "{{ device_api_force_service_restart | default(false) }}"

    - name: Check if service restart is needed (macOS)
      ansible.builtin.shell: |
        if pgrep -f "deviceapi" > /dev/null; then
          echo "service_running"
        else
          echo "service_stopped"
        fi
      register: device_api_service_status
      become_user: "{{ ansible_user }}"
      when: platform_state.is_macos
      changed_when: false
      tags: ["deviceapi", "check"]

    - name: Stop existing service only if restart needed (macOS)
      ansible.builtin.shell: |
        launchctl unload {{ ansible_user_dir }}/Library/LaunchAgents/{{ device_api_service_name }}.plist 2>/dev/null || true
        launchctl stop {{ device_api_service_name }} 2>/dev/null || true
        sleep 2
      become_user: "{{ ansible_user }}"
      when: 
        - platform_state.is_macos
        - device_api_force_service_restart or (device_api_service_status.stdout == "service_running")
      tags: ["deviceapi", "service", "stop"]

    - name: Stop existing service before updates (Linux)
      ansible.builtin.systemd:
        name: "{{ device_api_service_name }}.service"
        state: stopped
      become: true
      when: platform_state.is_ubuntu
      ignore_errors: true
      tags: ["deviceapi", "service", "stop"]

    - name: Setup unified API environment (standardized git management)
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../tasks/git-repository-management.yml"
      vars:
        repo_component_name: "device_api"
        repo_url: "{{ device_api.repository_url | default('https://github.com/oa-device/oaDeviceAPI.git') }}"
        repo_branch: "{{ device_api.branch | default('main') }}"
        repo_destination: "{{ device_api_path }}"
        repo_force_update: "{{ device_api_force_update | default(false) }}"
        repo_owner: "{{ ansible_user }}"
        repo_group: "{{ 'staff' if platform_state.is_macos else ansible_user }}"
      tags: ["deviceapi", "setup", "files"]

    - name: Configure Python environment (always update dependencies)
      ansible.builtin.include_tasks: python_environment.yml
      tags: ["deviceapi", "python", "dependencies"]

    - name: Configure platform-specific service (always restart)
      ansible.builtin.include_tasks: service_configuration.yml
      tags: ["deviceapi", "service"]

    - name: Validate deployment
      ansible.builtin.include_tasks: deployment_validation.yml
      tags: ["deviceapi", "validation"]

    - name: Display deployment completion status (standardized git info)
      ansible.builtin.debug:
        msg: |
          ===============================================
          Device API Deployment Completed Successfully!
          ===============================================
          Repository: {{ device_api.repository_url | default('https://github.com/oa-device/oaDeviceAPI.git') }}
          Branch: {{ device_api.branch | default('main') }}
          Service: {{ device_api_service_name }}
          Platform: {{ 'macOS' if platform_state.is_macos else 'Ubuntu' }}
          
          STANDARDIZED COMMIT VERIFICATION:
          {% if device_api_repo_info is defined %}
          {% set info = device_api_repo_info %}
          Current Commit: {{ info.final_commit[:8] if info.final_commit != 'unknown' else 'N/A' }}
          Branch: {{ info.final_branch }}
          Last Message: {{ info.final_message }}
          Author: {{ info.final_author }}
          Updated: {{ info.final_timestamp }}
          Repository Status: [{{ 'UPDATED' if info.updated else 'VERIFIED' }}]
          {% if info.update_operation and info.before_commit != 'none' %}
          Change: {{ info.before_commit[:8] }} â†’ {{ info.final_commit[:8] }}
          {% endif %}
          {% else %}
          Repository Status: [WARNING] Commit info not available
          {% endif %}
          
          Force Update Applied: {{ device_api_force_update | default(false) }}
          Service Restarted: {{ deviceapi_service_restarted | default(false) }}
          ===============================================

- name: Set deployment completion facts
  ansible.builtin.set_fact:
    unified_deviceapi_deployed: true
    unified_deviceapi_status: "updated"
    unified_deviceapi_platform: "{{ detected_platform }}"
    unified_deviceapi_last_update: "{{ ansible_date_time.iso8601 }}"
  when: platform_state.is_supported
  tags: ["device-api", "api"]