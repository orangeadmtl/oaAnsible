---
# Deployment validation for unified Device API - Comprehensive Testing
# Ensures the service is properly running and accessible

- name: Wait for service to initialize
  ansible.builtin.pause:
    seconds: 10

- name: Check service process status (macOS)
  ansible.builtin.shell: |
    if pgrep -f "{{ device_api_path }}/main.py" > /dev/null; then
      echo "PROCESS_RUNNING:true"
      ps aux | grep "{{ device_api_path }}/main.py" | grep -v grep | head -1
    else
      echo "PROCESS_RUNNING:false"
    fi
  become_user: "{{ ansible_user }}"
  register: process_status_macos
  when: platform_state.is_macos
  changed_when: false

- name: Check LaunchCtl service status (macOS)
  ansible.builtin.shell: |
    if launchctl list | grep -q "{{ device_api_service_name }}"; then
      echo "LAUNCHCTL_LOADED:true"
      launchctl list | grep "{{ device_api_service_name }}"
    else
      echo "LAUNCHCTL_LOADED:false"
    fi
  become_user: "{{ ansible_user }}"
  register: launchctl_status
  when: platform_state.is_macos
  changed_when: false

- name: Test basic API endpoint connectivity
  ansible.builtin.uri:
    url: "http://localhost:9090/"
    method: GET
    timeout: 10
    status_code: 200
  register: api_basic_test
  retries: 6
  delay: 5
  until: api_basic_test.status == 200
  ignore_errors: true

- name: Test platform endpoint
  ansible.builtin.uri:
    url: "http://localhost:9090/platform"  
    method: GET
    timeout: 10
    status_code: 200
  register: api_platform_test
  retries: 3
  delay: 2
  ignore_errors: true

- name: Test health endpoint (should exist for macOS)
  ansible.builtin.uri:
    url: "http://localhost:9090/health"
    method: GET 
    timeout: 10
    status_code: 200
  register: api_health_test
  retries: 3
  delay: 2
  when: platform_state.is_macos
  ignore_errors: true

- name: Check service logs for errors
  ansible.builtin.shell: |
    if [ -f "{{ device_api_path }}/logs/deviceapi.log" ]; then
      echo "LOG_FILE_EXISTS:true"
      echo "=== Recent Log Entries ==="
      tail -20 {{ device_api_path }}/logs/deviceapi.log | grep -E "(ERROR|Exception|Failed)" || echo "No errors found in recent logs"
    else
      echo "LOG_FILE_EXISTS:false"
    fi
  become_user: "{{ ansible_user }}"
  register: log_check
  changed_when: false

- name: Set validation results
  ansible.builtin.set_fact:
    deviceapi_validation_results:
      process_running: "{{ (process_status_macos.stdout | regex_search(\"PROCESS_RUNNING:true\")) is not none if platform_state.is_macos else true }}"
      launchctl_loaded: "{{ (launchctl_status.stdout | regex_search(\"LAUNCHCTL_LOADED:true\")) is not none if platform_state.is_macos else true }}" 
      api_basic_accessible: "{{ api_basic_test.status == 200 }}"
      api_platform_accessible: "{{ api_platform_test.status == 200 }}"
      api_health_accessible: "{{ api_health_test.status == 200 if platform_state.is_macos else true }}"
      log_file_exists: "{{ (log_check.stdout | regex_search(\"LOG_FILE_EXISTS:true\")) is not none }}"
      overall_status: "{{ 'SUCCESS' if api_basic_test.status == 200 else 'FAILED' }}"

- name: Display comprehensive validation results
  ansible.builtin.debug:
    msg: |
      ===============================================
      Device API Deployment Validation Results
      ===============================================
      Overall Status: {{ deviceapi_validation_results.overall_status }}
      
      Service Status:
      - Process Running: {{ deviceapi_validation_results.process_running }}
      - LaunchCtl Loaded: {{ deviceapi_validation_results.launchctl_loaded }}
      - Log File Exists: {{ deviceapi_validation_results.log_file_exists }}
      
      API Endpoint Tests:
      - Basic Endpoint (/): {{ '[OK] PASS' if deviceapi_validation_results.api_basic_accessible else '[FAIL] FAIL' }}
      - Platform Endpoint (/platform): {{ '[OK] PASS' if deviceapi_validation_results.api_platform_accessible else '[FAIL] FAIL' }}
      - Health Endpoint (/health): {{ '[OK] PASS' if deviceapi_validation_results.api_health_accessible else '[FAIL] FAIL' }}
      
      Access URLs:
      - API Base: http://{{ ansible_default_ipv4.address }}:9090/
      - API Docs: http://{{ ansible_default_ipv4.address }}:9090/docs
      - Health: http://{{ ansible_default_ipv4.address }}:9090/health
      ===============================================
      {% if deviceapi_validation_results.overall_status == 'FAILED' %}
      
      [WARNING]  DEPLOYMENT VALIDATION FAILED [WARNING]
      Please check the service logs and configuration.
      {% endif %}

- name: Fail deployment if validation fails
  ansible.builtin.fail:
    msg: |
      Device API deployment validation failed!
      - API Basic Test: {{ api_basic_test.status | default('no response') }}
      - Process Running: {{ deviceapi_validation_results.process_running }}
      - LaunchCtl Status: {{ deviceapi_validation_results.launchctl_loaded }}
      
      Check the service logs at: {{ device_api_path }}/logs/deviceapi.log
  when: deviceapi_validation_results.overall_status == 'FAILED' and not (ignore_validation_errors | default(false))