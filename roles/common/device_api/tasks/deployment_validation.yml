---
# Deployment validation for unified Device API - Comprehensive Testing
# Ensures the service is properly running and accessible

- name: Progressive service initialization check
  ansible.builtin.uri:
    url: "http://localhost:{{ device_api_port }}/"
    method: GET
    timeout: 5
    status_code: [200, 404, 503]  # Accept various states during startup
  register: service_startup_check
  retries: 12  # 1 minute total wait time 
  delay: 5
  until: service_startup_check.status == 200
  ignore_errors: true

- name: Check service process status (macOS)
  ansible.builtin.shell: |
    # Check for both the wrapper script and main.py
    if pgrep -f "{{ device_api_path }}/run_deviceapi.sh" > /dev/null || pgrep -f "{{ device_api_path }}/main.py" > /dev/null; then
      echo "PROCESS_RUNNING:true"
      ps aux | grep -E "({{ device_api_path }}/run_deviceapi.sh|{{ device_api_path }}/main.py)" | grep -v grep | head -1
    else
      echo "PROCESS_RUNNING:false"
    fi
  become_user: "{{ ansible_user }}"
  register: process_status_macos
  when: platform_state.is_macos
  changed_when: false

- name: Check LaunchCtl service status (macOS)
  ansible.builtin.shell: |
    if launchctl list | grep -q "{{ device_api_service_name }}"; then
      echo "LAUNCHCTL_LOADED:true"
      launchctl list | grep "{{ device_api_service_name }}"
    else
      echo "LAUNCHCTL_LOADED:false"
    fi
  become_user: "{{ ansible_user }}"
  register: launchctl_status
  when: platform_state.is_macos
  changed_when: false

- name: Test basic API endpoint connectivity
  ansible.builtin.uri:
    url: "http://localhost:{{ device_api_port }}/"
    method: GET
    timeout: 10
    status_code: 200
  register: api_basic_test
  retries: 3
  delay: 2
  until: api_basic_test.status == 200
  ignore_errors: true

- name: Test generic health endpoint (deployment-friendly)
  ansible.builtin.uri:
    url: "http://localhost:{{ device_api_port }}/health"
    method: GET
    timeout: 10
    status_code: [200, 404]  # Accept 404 as known issue with /health endpoint
  register: api_health_test
  retries: 3
  delay: 2
  ignore_errors: true

- name: Test platform-specific health endpoint (detailed diagnostics)
  ansible.builtin.uri:
    url: "http://localhost:{{ device_api_port }}/{{ platform_state.is_macos | ternary('macos', 'orangepi') }}/health"
    method: GET
    timeout: 10
    status_code: [200, 404]  # 404 is expected if platform router isn't loaded
  register: api_platform_health_test
  retries: 2
  delay: 1
  ignore_errors: true

- name: Check service logs for errors
  ansible.builtin.shell: |
    if [ -f "{{ device_api_path }}/logs/deviceapi.log" ]; then
      echo "LOG_FILE_EXISTS:true"
      echo "=== Recent Log Entries ==="
      tail -20 {{ device_api_path }}/logs/deviceapi.log | grep -E "(ERROR|Exception|Failed)" || echo "No errors found in recent logs"
    else
      echo "LOG_FILE_EXISTS:false"
    fi
  become_user: "{{ ansible_user }}"
  register: log_check
  changed_when: false

- name: Set validation results
  ansible.builtin.set_fact:
    deviceapi_validation_results:
      process_running: "{{ platform_state.is_macos | ternary((process_status_macos.stdout | regex_search('PROCESS_RUNNING:true')) is not none, true) }}"
      launchctl_loaded: "{{ platform_state.is_macos | ternary((launchctl_status.stdout | regex_search('LAUNCHCTL_LOADED:true')) is not none, true) }}" 
      api_basic_accessible: "{{ api_basic_test.status == 200 }}"
      api_health_accessible: "{{ api_health_test.status == 200 }}"
      api_platform_health_accessible: "{{ api_platform_health_test.status in [200, 404] }}"
      log_file_exists: "{{ (log_check.stdout | regex_search('LOG_FILE_EXISTS:true')) is not none }}"
      startup_time_acceptable: "{{ service_startup_check.elapsed | default(0) < 30 }}"
      overall_status: "{{ 'SUCCESS' if (api_basic_test.status == 200 and (api_health_test.status in [200, 404]) and api_platform_health_test.status == 200) else 'FAILED' }}"

- name: Display comprehensive validation results
  ansible.builtin.debug:
    msg: |
      ===============================================
      Device API Deployment Validation Results
      ===============================================
      Overall Status: {{ '[SUCCESS]' if deviceapi_validation_results.overall_status == 'SUCCESS' else '[FAILED]' }}
      Platform: {{ platform_state.is_macos | ternary('macOS', 'OrangePi/Linux') }}
      Startup Time: {{ service_startup_check.elapsed | default('N/A') }}s
      
      Service Status:
      - Process Running: {{ '[OK]' if deviceapi_validation_results.process_running else '[FAIL]' }} {{ deviceapi_validation_results.process_running }}
      - Service Manager: {{ '[OK]' if deviceapi_validation_results.launchctl_loaded else '[FAIL]' }} {{ deviceapi_validation_results.launchctl_loaded }}
      - Log File Exists: {{ '[OK]' if deviceapi_validation_results.log_file_exists else '[FAIL]' }} {{ deviceapi_validation_results.log_file_exists }}
      - Startup Time: {{ '[OK]' if deviceapi_validation_results.startup_time_acceptable else '[WARN]' }} {{ 'Acceptable' if deviceapi_validation_results.startup_time_acceptable else 'Slow' }}
      
      API Endpoint Tests:
      - Basic API (/): {{ '[OK] PASS' if deviceapi_validation_results.api_basic_accessible else '[FAIL] FAIL' }}
      - Generic Health (/health): {{ '[OK] PASS' if deviceapi_validation_results.api_health_accessible else '[FAIL] FAIL' }}
      - Platform Health (/{{ platform_state.is_macos | ternary('macos', 'orangepi') }}/health): {{ '[OK] AVAILABLE' if api_platform_health_test.status == 200 else '[INFO] OPTIONAL (404)' if api_platform_health_test.status == 404 else '[WARN] FAILED' }}
      
      Access URLs:
      - API Base: http://{{ ansible_default_ipv4.address }}:{{ device_api_port }}/
      - Generic Health: http://{{ ansible_default_ipv4.address }}:{{ device_api_port }}/health
      - Platform Health: http://{{ ansible_default_ipv4.address }}:{{ device_api_port }}/{{ platform_state.is_macos | ternary('macos', 'orangepi') }}/health
      - API Docs: http://{{ ansible_default_ipv4.address }}:{{ device_api_port }}/docs
      ===============================================
      {% if deviceapi_validation_results.overall_status == 'FAILED' %}
      
      [WARNING] DEPLOYMENT VALIDATION FAILED [WARNING]
      Essential endpoints are not responding. Check service logs and configuration.
      {% endif %}

- name: Fail deployment if validation fails
  ansible.builtin.fail:
    msg: |
      Device API deployment validation failed!
      - API Basic Test: {{ api_basic_test.status | default('no response') }}
      - Process Running: {{ deviceapi_validation_results.process_running }}
      - LaunchCtl Status: {{ deviceapi_validation_results.launchctl_loaded }}
      
      Check the service logs at: {{ device_api_path }}/logs/deviceapi.log
  when: deviceapi_validation_results.overall_status == 'FAILED' and not (ignore_validation_errors | default(false))