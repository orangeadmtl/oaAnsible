# OrangePi Custom Functions
# Enhanced utilities for OrangePi device management

# Quick health check with formatted output
oahealth() {
    echo "[ORANGE] Checking OrangePi health..."
    curl -s "http://localhost:{{ health_api_port }}/health" | jq . 2>/dev/null || {
        echo "[FAIL] Health API not responding on port {{ health_api_port }}"
        return 1
    }
}

# Enhanced service status with colors
oastatus() {
    echo "[ORANGE] OrangePi Service Status:"
    echo "=========================="
    
    services=(
        "health-check-api.service"
        "slideshow-player.service" 
        "display-setup.service"
        "hide-cursor.service"
        "chromium-log-monitor.service"
    )
    
    for service in "${services[@]}"; do
        if systemctl is-active --quiet "$service"; then
            echo "[OK] $service: Running"
        else
            echo "[FAIL] $service: Stopped"
        fi
    done
    
    echo ""
    echo "[WEB] Network Status:"
    if command -v tailscale >/dev/null 2>&1; then
        if tailscale status >/dev/null 2>&1; then
            echo "[OK] Tailscale: Connected"
        else
            echo "[FAIL] Tailscale: Disconnected"
        fi
    else
        echo "[WARNING]  Tailscale: Not installed"
    fi
}

# Restart all OrangePi services
oarestart() {
    echo "[CYCLE] Restarting OrangePi services..."
    sudo systemctl restart health-check-api.service
    sudo systemctl restart slideshow-player.service
    sleep 2
    oastatus
}

# Show current player status
oaplayerstatus() {
    echo "[MEDIA] Player Status:"
    journalctl -u slideshow-player.service --no-pager -n 10
}

# Quick log viewer
oalogs() {
    service=${1:-slideshow-player.service}
    echo "[LIST] Viewing logs for $service (Ctrl+C to exit):"
    journalctl -u "$service" -f
}

# System information summary
oainfo() {
    echo "[ORANGE] OrangePi System Information"
    echo "=============================="
    echo "Device ID: {{ device_id }}"
    echo "Series: {{ device_series }}"
    echo "Location: {{ device_location }}"
    echo "Hostname: $(hostname)"
    echo "Uptime: $(uptime -p)"
    echo "Load: $(uptime | grep -ohe 'load average[s:][: ].*' | awk '{print $3" "$4" "$5}')"
    echo "Memory: $(free -h | awk 'NR==2{print $3"/"$2" ("$3/$2*100"%)"}')"
    echo "Disk: $(df -h / | awk 'NR==2{print $3"/"$2" ("$5")"}')"
    echo ""
    oahealth
}

# Tailscale quick status
oats() {
    if command -v tailscale >/dev/null 2>&1; then
        echo "[WEB] Tailscale Status:"
        tailscale status --self
    else
        echo "[FAIL] Tailscale not installed"
    fi
}