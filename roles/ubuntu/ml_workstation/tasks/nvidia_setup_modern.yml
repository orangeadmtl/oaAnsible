---
# Modern NVIDIA Installation - PPA + CUDA Keyring Approach
# Target: NVIDIA Driver 570-server + CUDA 12.8
# Method: Combines ppa:graphics-drivers/ppa with official CUDA keyring
# Compatible with: Ubuntu 22.04 LTS
# 
# This replaces the legacy nvidia_setup.yml with a cleaner, more reliable approach
# that avoids DKMS compilation issues and provides better package management.

- name: Display modern NVIDIA installation information
  ansible.builtin.debug:
    msg:
      - "Installing NVIDIA stack using modern PPA + CUDA keyring approach"
      - "Target: NVIDIA Driver 570-server + CUDA 12.8"
      - "Method: ppa:graphics-drivers/ppa + Official CUDA keyring"
      - "Platform: {{ ansible_distribution }} {{ ansible_distribution_version }}"
      - "Architecture: {{ ansible_architecture }}"
  tags: [gpu, nvidia, cuda, info]

# Phase 1: Pre-installation Validation
- name: Check Ubuntu version compatibility
  ansible.builtin.fail:
    msg: |
      This role is designed for Ubuntu 22.04 LTS.
      Current version: {{ ansible_distribution }} {{ ansible_distribution_version }}
      You may need to adjust repository URLs for other versions.
  when: 
    - ansible_distribution != "Ubuntu"
    - ansible_distribution_version != "22.04"
    - not (force_install | default(false))
  tags: [gpu, nvidia, validation]

- name: Detect NVIDIA hardware
  ansible.builtin.shell: |
    set -o pipefail
    lspci | grep -i nvidia || echo "NO_NVIDIA_HARDWARE"
  register: nvidia_hardware_detection
  changed_when: false
  failed_when: false
  args:
    executable: /bin/bash
  tags: [gpu, nvidia, hardware]

- name: Verify NVIDIA hardware is present
  ansible.builtin.fail:
    msg: |
      No NVIDIA hardware detected on this system.
      Hardware check output: {{ nvidia_hardware_detection.stdout }}
      Use 'force_install=true' to bypass this check.
  when:
    - "'NO_NVIDIA_HARDWARE' in nvidia_hardware_detection.stdout"
    - not (force_install | default(false))
  tags: [gpu, nvidia, hardware]

- name: Display detected NVIDIA hardware
  ansible.builtin.debug:
    msg: |
      NVIDIA Hardware Detected:
      {{ nvidia_hardware_detection.stdout_lines | join('\n') }}
  when: "'NO_NVIDIA_HARDWARE' not in nvidia_hardware_detection.stdout"
  tags: [gpu, nvidia, hardware, info]

- name: Check current installation status
  ansible.builtin.shell: |
    echo "=== NVIDIA Driver Status ==="
    if command -v nvidia-smi >/dev/null 2>&1; then
      nvidia-smi --query-gpu=name,driver_version --format=csv,noheader 2>/dev/null || echo "Driver installed but not working"
    else
      echo "No NVIDIA driver installed"
    fi
    echo "=== CUDA Status ==="
    if command -v nvcc >/dev/null 2>&1; then
      nvcc --version | grep "release" || echo "CUDA installed but not working"
    else
      echo "No CUDA toolkit installed"
    fi
  register: current_status_check
  changed_when: false
  failed_when: false
  tags: [gpu, nvidia, status]

- name: Display current installation status
  ansible.builtin.debug:
    msg: |
      Current Installation Status:
      {{ current_status_check.stdout }}
  tags: [gpu, nvidia, status, info]

# Phase 2: Clean Installation (Optional)
- name: Remove existing NVIDIA installation (if requested)
  block:
    - name: Remove existing NVIDIA packages
      ansible.builtin.apt:
        name:
          - 'nvidia-*'
          - 'cuda-*'
          - 'libcuda*'
          - 'libnvidia-*'
        state: absent
        purge: true
      become: true
      
    - name: Remove CUDA directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      become: true
      loop:
        - /usr/local/cuda
        - /usr/local/cuda-*
        - /etc/ld.so.conf.d/cuda.conf
        
    - name: Clean package cache
      ansible.builtin.apt:
        autoremove: true
        autoclean: true
      become: true
  when: clean_install | default(false)
  tags: [gpu, nvidia, cleanup]

# Phase 3: Prerequisites and Repository Setup
- name: Install prerequisites
  ansible.builtin.apt:
    name:
      - software-properties-common
      - apt-transport-https
      - ca-certificates
      - gnupg
      - lsb-release
      - wget
      - curl
      - build-essential
      - dkms
    state: present
    update_cache: true
  become: true
  tags: [gpu, nvidia, prerequisites]

- name: Add graphics drivers PPA
  ansible.builtin.apt_repository:
    repo: ppa:graphics-drivers/ppa
    state: present
    update_cache: true
  become: true
  tags: [gpu, nvidia, repository]

- name: Download CUDA keyring package
  ansible.builtin.get_url:
    url: "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb"
    dest: "/tmp/cuda-keyring_1.1-1_all.deb"
    mode: "0644"
  become: true
  tags: [gpu, nvidia, cuda, repository]

- name: Install CUDA repository keyring
  ansible.builtin.apt:
    deb: "/tmp/cuda-keyring_1.1-1_all.deb"
    state: present
  become: true
  when: not ansible_check_mode  # Skip in check mode since file won't exist
  tags: [gpu, nvidia, cuda, repository]

- name: Update package cache after adding repositories
  ansible.builtin.apt:
    update_cache: true
  become: true
  tags: [gpu, nvidia, repository]

# Phase 4: NVIDIA Driver Installation
- name: Check available NVIDIA driver 570 versions
  ansible.builtin.shell: |
    set -o pipefail
    apt-cache policy nvidia-driver-570-server | grep Candidate || echo "Not available"
  register: driver_570_availability
  changed_when: false
  args:
    executable: /bin/bash
  tags: [gpu, nvidia, drivers]

- name: Display driver availability
  ansible.builtin.debug:
    msg: |
      NVIDIA Driver 570-server availability:
      {{ driver_570_availability.stdout }}
  tags: [gpu, nvidia, drivers, info]

- name: Install NVIDIA driver 570-server
  ansible.builtin.apt:
    name:
      - nvidia-driver-570-server
      - nvidia-utils-570-server
      - nvidia-settings
    state: present
  become: true
  register: nvidia_driver_install_result
  tags: [gpu, nvidia, drivers]

- name: Install additional NVIDIA components
  ansible.builtin.apt:
    name:
      - nvidia-compute-utils-570-server
      - libnvidia-compute-570-server
    state: present
  become: true
  failed_when: false  # Some packages may not be available
  tags: [gpu, nvidia, drivers]

# Phase 5: CUDA Toolkit Installation  
- name: Check available CUDA 12.8 packages
  ansible.builtin.shell: |
    set -o pipefail
    apt-cache policy cuda-toolkit-12-8 | grep Candidate || echo "Not available"
  register: cuda_availability
  changed_when: false
  args:
    executable: /bin/bash
  tags: [gpu, nvidia, cuda]

- name: Display CUDA availability
  ansible.builtin.debug:
    msg: |
      CUDA 12.8 toolkit availability:
      {{ cuda_availability.stdout }}
  tags: [gpu, nvidia, cuda, info]

- name: Install CUDA toolkit 12.8
  ansible.builtin.apt:
    name: cuda-toolkit-12-8
    state: present
  become: true
  register: cuda_install_result
  tags: [gpu, nvidia, cuda]

- name: Install additional CUDA components
  ansible.builtin.apt:
    name:
      - cuda-compiler-12-8
      - cuda-nvcc-12-8
      - cuda-tools-12-8
      - cuda-cccl-12-8
    state: present
  become: true
  failed_when: false  # Some packages may not be available
  tags: [gpu, nvidia, cuda]

- name: Install cuDNN (optional)
  ansible.builtin.apt:
    name:
      - libcudnn8
      - libcudnn8-dev
    state: present
  become: true
  failed_when: false  # May not be available in all repositories
  tags: [gpu, nvidia, cudnn]

# Phase 6: Environment Configuration
- name: Check for CUDA installation directory
  ansible.builtin.stat:
    path: "/usr/local/cuda-12.8"
  register: cuda_install_dir
  tags: [gpu, nvidia, cuda, environment]

- name: Create CUDA symbolic link
  ansible.builtin.file:
    src: "/usr/local/cuda-12.8"
    dest: "/usr/local/cuda"
    state: link
    force: true
  become: true
  when: cuda_install_dir.stat.exists
  tags: [gpu, nvidia, cuda, environment]

- name: Create system-wide CUDA environment script
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # CUDA 12.8 Environment Configuration
      # Auto-generated by Ansible nvidia_setup_modern.yml
      
      if [ -d "/usr/local/cuda" ]; then
          export CUDA_HOME="/usr/local/cuda"
          export CUDA_PATH="/usr/local/cuda"
          
          # Add to PATH if not already present
          if [[ ":$PATH:" != *":/usr/local/cuda/bin:"* ]]; then
              export PATH="/usr/local/cuda/bin:$PATH"
          fi
          
          # Add to LD_LIBRARY_PATH if not already present
          if [[ ":$LD_LIBRARY_PATH:" != *":/usr/local/cuda/lib64:"* ]]; then
              export LD_LIBRARY_PATH="/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
          fi
          if [[ ":$LD_LIBRARY_PATH:" != *":/usr/local/cuda/lib:"* ]]; then
              export LD_LIBRARY_PATH="/usr/local/cuda/lib:$LD_LIBRARY_PATH"
          fi
      fi
    dest: "/etc/profile.d/cuda.sh"
    mode: "0755"
    owner: root
    group: root
  become: true
  tags: [gpu, nvidia, cuda, environment]

- name: Configure dynamic linker for CUDA libraries
  ansible.builtin.copy:
    content: |
      /usr/local/cuda/lib64
      /usr/local/cuda/lib
    dest: "/etc/ld.so.conf.d/cuda.conf"
    mode: "0644"
    owner: root
    group: root
  become: true
  tags: [gpu, nvidia, cuda, environment]

- name: Refresh dynamic linker cache
  ansible.builtin.command: ldconfig
  become: true
  changed_when: false
  tags: [gpu, nvidia, cuda, environment]

# Phase 7: Reboot if Required
- name: Check if reboot is required
  ansible.builtin.set_fact:
    reboot_required: >-
      {{
        (nvidia_driver_install_result is defined and nvidia_driver_install_result.changed) or
        (cuda_install_result is defined and cuda_install_result.changed)
      }}
  tags: [gpu, nvidia, reboot]

- name: Reboot system to load new drivers
  ansible.builtin.reboot:
    msg: "Rebooting to load new NVIDIA drivers and CUDA toolkit"
    reboot_timeout: 1800
    connect_timeout: 30
    pre_reboot_delay: 5
    post_reboot_delay: 30
  when: 
    - reboot_required
    - auto_reboot | default(true)
  become: true
  tags: [gpu, nvidia, reboot]

- name: Display reboot recommendation
  ansible.builtin.debug:
    msg: |
      REBOOT REQUIRED: New NVIDIA drivers and CUDA toolkit have been installed.
      Please reboot the system manually to load the new components.
      After reboot, verify with: nvidia-smi && nvcc --version
  when: 
    - reboot_required
    - not (auto_reboot | default(true))
  tags: [gpu, nvidia, reboot, info]

# Phase 8: Verification
- name: Verify NVIDIA driver installation
  ansible.builtin.shell: |
    set -o pipefail
    # Source environment first
    if [ -f /etc/profile.d/cuda.sh ]; then
        source /etc/profile.d/cuda.sh
    fi
    
    echo "=== NVIDIA Driver Verification ==="
    if command -v nvidia-smi >/dev/null 2>&1; then
        nvidia-smi --query-gpu=name,memory.total,driver_version --format=csv,noheader
    else
        echo "NVIDIA-SMI not found - may require reboot"
    fi
    
    echo "=== CUDA Toolkit Verification ==="
    if command -v nvcc >/dev/null 2>&1; then
        nvcc --version | grep "release"
    else
        echo "NVCC not found - may require reboot or new shell session"
    fi
    
    echo "=== CUDA Libraries Verification ==="
    if [ -d "/usr/local/cuda/lib64" ]; then
        lib_count=$(find /usr/local/cuda/lib64 -name "*.so*" 2>/dev/null | wc -l)
        echo "Found $lib_count CUDA library files"
    else
        echo "CUDA library directory not found"
    fi
  register: installation_verification
  changed_when: false
  failed_when: false
  environment:
    PATH: "/usr/local/cuda/bin:{{ ansible_env.PATH }}"
    LD_LIBRARY_PATH: "/usr/local/cuda/lib64:/usr/local/cuda/lib"
  args:
    executable: /bin/bash
  tags: [gpu, nvidia, verify]

- name: Display installation verification results
  ansible.builtin.debug:
    msg: |
      Installation Verification Results:
      {{ installation_verification.stdout }}
  tags: [gpu, nvidia, verify, info]

- name: Install GPU monitoring tools
  ansible.builtin.pip:
    name:
      - nvidia-ml-py3
      - gpustat
    state: present
    executable: pip3
  become: true
  failed_when: false  # May fail if driver not loaded yet
  tags: [gpu, nvidia, monitoring]

# Phase 9: Installation Summary
- name: Create installation summary
  ansible.builtin.set_fact:
    nvidia_installation_summary:
      hardware: "{{ nvidia_hardware_detection.stdout_lines[0] | default('Unknown') if 'NO_NVIDIA_HARDWARE' not in nvidia_hardware_detection.stdout else 'No NVIDIA hardware detected' }}"
      driver_target: "nvidia-driver-570-server"
      cuda_target: "cuda-toolkit-12-8"
      installation_method: "PPA + CUDA Keyring"
      reboot_required: "{{ reboot_required }}"
      verification_status: "{{ 'Pending reboot' if reboot_required else 'Completed' }}"
  tags: [gpu, nvidia, summary]

- name: Display installation summary
  ansible.builtin.debug:
    msg:
      - "[TARGET] Modern NVIDIA Installation Complete"
      - "Hardware: {{ nvidia_installation_summary.hardware }}"
      - "Driver: {{ nvidia_installation_summary.driver_target }}"
      - "CUDA: {{ nvidia_installation_summary.cuda_target }}"
      - "Method: {{ nvidia_installation_summary.installation_method }}"
      - "Reboot Required: {{ nvidia_installation_summary.reboot_required }}"
      - "Status: {{ nvidia_installation_summary.verification_status }}"
      - ""
      - "Next Steps:"
      - "1. Reboot system (if not done automatically): sudo reboot"
      - "2. Verify installation: nvidia-smi && nvcc --version"
      - "3. Test CUDA: Run a simple CUDA program or use PyTorch/TensorFlow"
  tags: [gpu, nvidia, summary, info]

# Cleanup
- name: Clean up temporary files
  ansible.builtin.file:
    path: "/tmp/cuda-keyring_1.1-1_all.deb"
    state: absent
  become: true
  tags: [gpu, nvidia, cleanup]