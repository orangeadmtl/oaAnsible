---
# macOS ML Workstation Setup Tasks

- name: Check if running on macOS
  ansible.builtin.fail:
    msg: "This role is designed for macOS systems only"
  when: ansible_os_family != "Darwin"
  tags: [always]

- name: Detect Apple Silicon vs Intel
  ansible.builtin.set_fact:
    is_apple_silicon: "{{ ansible_processor[0] is search('Apple') }}"
  tags: [always]

- name: Display system information
  ansible.builtin.debug:
    msg:
      - "Setting up macOS ML workstation"
      - "Platform: {{ ansible_processor[0] }}"
      - "Architecture: {{ ansible_architecture }}"
      - "Apple Silicon: {{ is_apple_silicon }}"
  tags: [info]

# Xcode Command Line Tools
- name: Install Xcode Command Line Tools
  ansible.builtin.shell: |
    if ! xcode-select -p &> /dev/null; then
      echo "Installing Xcode Command Line Tools..."
      xcode-select --install
      # Wait for installation to complete
      until xcode-select -p &> /dev/null; do
        sleep 5
      done
      echo "Xcode Command Line Tools installed"
    else
      echo "Xcode Command Line Tools already installed"
    fi
  register: xcode_install
  changed_when: "'Installing' in xcode_install.stdout"
  when: install_xcode_tools
  tags: [setup, xcode]

# Homebrew packages for ML development
- name: Install Homebrew packages for ML development
  community.general.homebrew:
    name: "{{ macos_dev_tools.homebrew_packages }}"
    state: present
  tags: [setup, homebrew]

- name: Install Python build dependencies via Homebrew
  community.general.homebrew:
    name: "{{ macos_dev_tools.python_build_deps }}"
    state: present
  tags: [setup, homebrew, python]

# Performance optimizations
- name: Increase file descriptor limits
  ansible.builtin.blockinfile:
    path: "{{ ansible_user_dir }}/.zshrc"
    marker: "# {mark} ANSIBLE MANAGED - macOS ML Performance"
    block: |
      # macOS ML Performance Optimizations
      ulimit -n 8192

      # Apple Silicon optimizations
      {% if is_apple_silicon %}
      export PYTORCH_ENABLE_MPS_FALLBACK=1  # Fallback for unsupported ops
      export PYTORCH_MPS_HIGH_WATERMARK_RATIO=0.0  # Optimize memory usage
      {% endif %}

      # OpenMP settings for better performance
      export OMP_NUM_THREADS="{{ ansible_processor_vcpus }}"
      export MKL_NUM_THREADS="{{ ansible_processor_vcpus }}"

      # ML framework optimizations
      export ACCELERATE=1  # Use Apple's Accelerate framework
      export VECLIB_MAXIMUM_THREADS="{{ ansible_processor_vcpus }}"

    create: true
    mode: "0644"
  become: true
  become_user: "{{ ansible_user }}"
  when: macos_performance.increase_file_limits
  tags: [setup, performance]

- name: Create ML development environment info
  ansible.builtin.template:
    src: macos_ml_env.sh.j2
    dest: "{{ ansible_user_dir }}/.ml_env_macos"
    owner: "{{ ansible_user }}"
    mode: "0644"
  tags: [setup, environment]

- name: Source ML environment in shell
  ansible.builtin.lineinfile:
    path: "{{ ansible_user_dir }}/.zshrc"
    line: "source {{ ansible_user_dir }}/.ml_env_macos"
    create: true
    mode: "0644"
  become: true
  become_user: "{{ ansible_user }}"
  tags: [setup, environment]

# GPU monitoring for Apple Silicon
- name: Install GPU monitoring script for Apple Silicon
  ansible.builtin.template:
    src: macos_gpu_monitor.sh.j2
    dest: "{{ ansible_user_dir }}/orangead/scripts/gpu_monitor.sh"
    owner: "{{ ansible_user }}"
    mode: "0755"
  when: is_apple_silicon and macos_monitoring.log_gpu_usage
  tags: [setup, monitoring]

- name: Create Desktop shortcuts for ML development
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ ansible_user_dir }}/Desktop/{{ item.name }}"
    owner: "{{ ansible_user }}"
    mode: "0755"
  loop:
    - { src: "oaSentinel_Terminal.command.j2", name: "oaSentinel Terminal.command" }
    - { src: "ML_Status.command.j2", name: "ML Status.command" }
  when: macos_dev_env.create_desktop_shortcuts
  tags: [setup, shortcuts]

# Platform-specific ML framework setup
- name: Install macOS-specific ML tools
  ansible.builtin.pip:
    name:
      - coremltools
    virtualenv: "{{ python_venv_dir }}"
    virtualenv_command: "{{ python_venv_dir }}/bin/python -m venv"
  become: true
  become_user: "{{ ansible_user }}"
  when: macos_ml_extras.coreml_tools
  tags: [setup, ml_frameworks]

- name: Configure PyTorch for Apple Silicon
  ansible.builtin.lineinfile:
    path: "{{ oasentinel_install_dir }}/.env"
    line: "{{ item }}"
    create: true
    mode: "0644"
  loop:
    - "PYTORCH_ENABLE_MPS_FALLBACK=1"
    - "PYTORCH_MPS_HIGH_WATERMARK_RATIO=0.0"
  when: is_apple_silicon and apple_silicon_optimizations.enable_mps
  tags: [setup, pytorch]

- name: Create macOS-specific training configuration
  ansible.builtin.template:
    src: macos_training_config.yaml.j2
    dest: "{{ oasentinel_install_dir }}/configs/macos_optimized.yaml"
    owner: "{{ ansible_user }}"
    mode: "0644"
  tags: [setup, config]

- name: Run macOS-specific ML verification
  ansible.builtin.shell: |
    cd "{{ oasentinel_install_dir }}"
    source .venv/bin/activate
    python -c "
    import torch
    import platform
    print('[MACOS] macOS ML Environment Verification')
    print('=' * 40)
    print(f'Platform: {platform.platform()}')
    print(f'PyTorch Version: {torch.__version__}')
    {% if is_apple_silicon %}
    print(f'MPS Available: {torch.backends.mps.is_available()}')
    print(f'MPS Built: {torch.backends.mps.is_built()}')
    if torch.backends.mps.is_available():
        print('[OK] Apple Silicon GPU acceleration ready!')
    {% else %}
    print('Intel Mac - CPU training optimized')
    {% endif %}
    print('=' * 40)
    print('[OK] macOS ML Environment Check Complete')
    "
  register: macos_verification
  changed_when: false
  failed_when: false
  become: true
  become_user: "{{ ansible_user }}"
  tags: [verify]

- name: Display verification results
  ansible.builtin.debug:
    msg: "{{ macos_verification.stdout_lines }}"
  tags: [verify]

- name: MacOS ML setup summary
  ansible.builtin.debug:
    msg:
      - "[MACOS] macOS ML Workstation Setup Complete!"
      - "Architecture: {{ 'Apple Silicon' if is_apple_silicon else 'Intel' }}"
      - "GPU Acceleration: {{ 'MPS (Metal)' if is_apple_silicon else 'CPU Optimized' }}"
      - "oaSentinel: {{ oasentinel_install_dir }}"
      - "Use Desktop shortcuts or 'mlcli' for access"
      - "Training config: configs/macos_optimized.yaml"
  tags: [summary]
