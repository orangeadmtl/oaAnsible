---
# Tasks for configuring camera permissions on macOS
# This role focuses on granting camera access to required applications

# Set fallback Python variables for compatibility
- name: Set Python runtime variables for backward compatibility
  ansible.builtin.set_fact:
    python:
      version: "{{ runtime.python.version | default('3.11.11') }}"
  when: python is undefined

# Verify Python virtual environments exist
- name: Check if Python virtual environments exist
  ansible.builtin.stat:
    path: "{{ item }}"
  loop:
    - "{{ ansible_user_dir }}/orangead/oaDeviceAPI/.venv/bin/python3"
    - "{{ ansible_user_dir }}/orangead/tracker/.venv/bin/python"
  register: venv_check

- name: Skip camera permissions if virtual environments don't exist
  ansible.builtin.debug:
    msg: "Python virtual environments not found. Skipping camera permissions setup. Run device-api and tracker roles first."
  when: not (venv_check.results[0].stat.exists and venv_check.results[1].stat.exists)

- name: Set skip camera permissions flag
  ansible.builtin.set_fact:
    skip_camera_permissions: true
  when: not (venv_check.results[0].stat.exists and venv_check.results[1].stat.exists)

# All subsequent tasks now have the conditional check
- name: Continue only if virtual environments exist
  ansible.builtin.set_fact:
    venv_exists: "{{ venv_check.results[0].stat.exists and venv_check.results[1].stat.exists }}"
# Get Python paths
- name: Get Python paths
  ansible.builtin.shell: |
    set -o pipefail
    which python3
  register: python_path
  changed_when: false
  when: venv_exists | default(false)

# Find setsid path
- name: Find setsid executable path
  ansible.builtin.shell: |
    set -o pipefail
    # Try to find setsid using 'which'
    SETSID_PATH=$(which setsid 2>/dev/null)
    if [ -z "$SETSID_PATH" ] || [ ! -f "$SETSID_PATH" ]; then
      # Try common locations
      for path in \
        /opt/homebrew/Cellar/util-linux/*/bin/setsid \
        /usr/local/opt/util-linux/bin/setsid \
        /usr/bin/setsid \
        /opt/homebrew/bin/setsid \
        /usr/local/bin/setsid; do
        if [ -f "$path" ]; then
          SETSID_PATH="$path"
          break
        fi
      done
    fi

    # Output the path if found, otherwise output an error message
    if [ -n "$SETSID_PATH" ] && [ -f "$SETSID_PATH" ]; then
      echo "$SETSID_PATH"
    else
      echo "SETSID_NOT_FOUND"
    fi
  register: setsid_path
  changed_when: false

- name: Display setsid path
  ansible.builtin.debug:
    msg: "Found setsid at: {{ setsid_path.stdout }}"

- name: Fail if setsid is not found
  ansible.builtin.fail:
    msg: "setsid executable not found. Please install util-linux package."
  when: setsid_path.stdout == "SETSID_NOT_FOUND"

# Determine real Python executable paths (following symlinks)
- name: Get real Python executable paths
  ansible.builtin.shell: |
    set -o pipefail
    readlink -f $(which python3) || which python3
  register: real_python_path
  changed_when: false

# Set Python executable paths
- name: Set Python executable paths
  ansible.builtin.set_fact:
    api_python: "{{ ansible_user_dir }}/orangead/oaDeviceAPI/.venv/bin/python3"
    tracker_python: "{{ ansible_user_dir }}/orangead/tracker/.venv/bin/python3"
    python_execs:
      real_api: "{{ ansible_python_interpreter_strategy.default }}"
      real_tracker: "{{ ansible_python_interpreter_strategy.default }}"

# Show Python executable paths
- name: Show Python executable paths
  ansible.builtin.debug:
    msg: |
      API Python: {{ api_python }} → {{ python_execs.real_api }}
      Tracker Python: {{ tracker_python }} → {{ python_execs.real_tracker }}

# Define applications that need camera access
- name: Set camera access applications
  ansible.builtin.set_fact:
    camera_apps:
      - name: "{{ api_python }}"
        type: 1 # Executable path
      - name: "{{ python_execs.real_api }}"
        type: 1 # Executable path
      - name: "{{ tracker_python }}"
        type: 1 # Executable path
      - name: "{{ python_execs.real_tracker }}"
        type: 1 # Executable path
      - name: "{{ setsid_path.stdout }}"
        type: 1 # Executable path (dynamically found)
      - name: "/usr/bin/nohup"
        type: 1 # Executable path (for new oaTracker execution chain)
      - name: "/bin/bash"
        type: 1 # Executable path (shell that may execute tracker scripts)
      - name: "/usr/local/bin/tailscaled"
        type: 1 # Executable path
      - name: "{{ ansible_user_dir }}/go/bin/tailscaled"
        type: 1 # Executable path (compiled from source)
      - name: "/usr/libexec/sshd-keygen-wrapper"
        type: 1 # Executable path
      - name: "com.apple.Terminal"
        type: 0 # Bundle ID
      - name: "/opt/homebrew/bin/ffmpeg"
        type: 1 # Executable path (for CamGuard video recording)
      - name: "/usr/local/bin/ffmpeg"
        type: 1 # Executable path (alternative ffmpeg location)

# Check camera permissions using template
- name: Create script to check camera permissions
  ansible.builtin.template:
    src: check_camera_permissions.sh.j2
    dest: /tmp/check_camera_permissions.sh
    mode: "0755"
  changed_when: false

# Run the check camera permissions script
- name: Run script to check camera permissions
  ansible.builtin.command: /tmp/check_camera_permissions.sh
  register: camera_check_output
  changed_when: false

# Parse camera check output as JSON
- name: Parse camera check output
  ansible.builtin.set_fact:
    camera_status: "{{ camera_check_output.stdout | from_json }}"

# Display camera status
- name: Set API access status
  ansible.builtin.set_fact:
    api_access_status: "{% if camera_status.api_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set Tracker access status
  ansible.builtin.set_fact:
    tracker_access_status: "{% if camera_status.tracker_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set setsid access status
  ansible.builtin.set_fact:
    setsid_access_status: "{% if camera_status.setsid_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set nohup access status
  ansible.builtin.set_fact:
    nohup_access_status: "{% if camera_status.nohup_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set bash access status
  ansible.builtin.set_fact:
    bash_access_status: "{% if camera_status.bash_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set Tailscale access status
  ansible.builtin.set_fact:
    tailscale_access_status: "{% if camera_status.tailscale_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set Terminal access status
  ansible.builtin.set_fact:
    terminal_access_status: "{% if camera_status.terminal_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set SSH access status
  ansible.builtin.set_fact:
    ssh_access_status: "{% if camera_status.ssh_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set ffmpeg access status
  ansible.builtin.set_fact:
    ffmpeg_access_status: "{% if camera_status.ffmpeg_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set shared memory status
  ansible.builtin.set_fact:
    shared_memory_status: "{% if camera_status.shared_memory_exists | int > 0 %}Yes{% else %}No{% endif %}"

- name: Set tracker running status
  ansible.builtin.set_fact:
    tracker_running_status: "{% if camera_status.tracker_running | int > 0 %}Yes{% else %}No{% endif %}"

- name: Set tracker accessible status
  ansible.builtin.set_fact:
    tracker_accessible_status: "{% if camera_status.tracker_accessible | int > 0 %}Yes{% else %}No{% endif %}"

- name: Display camera status
  ansible.builtin.debug:
    msg: |
      Camera permissions status:
      - API Python: {{ api_access_status }}
      - Tracker Python: {{ tracker_access_status }}
      - setsid ({{ setsid_path.stdout }}): {{ setsid_access_status }}
      - nohup (/usr/bin/nohup): {{ nohup_access_status }}
      - bash (/bin/bash): {{ bash_access_status }}
      - Tailscale: {{ tailscale_access_status }}
      - Terminal: {{ terminal_access_status }}
      - SSH: {{ ssh_access_status }}
      - ffmpeg: {{ ffmpeg_access_status }}

      Shared memory status:
      - Shared memory file exists: {{ shared_memory_status }}
      - Tracker is running: {{ tracker_running_status }}
      - Tracker camera feed is accessible: {{ tracker_accessible_status }}

# Grant camera permissions if needed
- name: Check if API access is missing
  ansible.builtin.set_fact:
    api_access_missing: "{% if camera_status.api_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if Tracker access is missing
  ansible.builtin.set_fact:
    tracker_access_missing: "{% if camera_status.tracker_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if setsid access is missing
  ansible.builtin.set_fact:
    setsid_access_missing: "{% if camera_status.setsid_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if nohup access is missing
  ansible.builtin.set_fact:
    nohup_access_missing: "{% if camera_status.nohup_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if bash access is missing
  ansible.builtin.set_fact:
    bash_access_missing: "{% if camera_status.bash_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if Tailscale access is missing
  ansible.builtin.set_fact:
    tailscale_access_missing: "{% if camera_status.tailscale_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if Terminal access is missing
  ansible.builtin.set_fact:
    terminal_access_missing: "{% if camera_status.terminal_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if SSH access is missing
  ansible.builtin.set_fact:
    ssh_access_missing: "{% if camera_status.ssh_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if ffmpeg access is missing
  ansible.builtin.set_fact:
    ffmpeg_access_missing: "{% if camera_status.ffmpeg_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if camera permissions need to be granted
  ansible.builtin.set_fact:
    need_camera_permissions:
      "{{ api_access_missing == 'true' or tracker_access_missing == 'true' or setsid_access_missing == 'true' or nohup_access_missing == 'true' or
      bash_access_missing == 'true' or tailscale_access_missing == 'true' or terminal_access_missing == 'true' or ssh_access_missing == 'true' or
      ffmpeg_access_missing == 'true' }}"

# Grant Full Disk Access first (required for TCC database access)
- name: Create script to grant Full Disk Access
  ansible.builtin.template:
    src: grant_full_disk_access.sh.j2
    dest: /tmp/grant_full_disk_access.sh
    mode: "0755"
  changed_when: true

- name: Run script to grant Full Disk Access
  ansible.builtin.command: /tmp/grant_full_disk_access.sh
  register: grant_fda_result
  changed_when: true
  failed_when: false

- name: Display Full Disk Access grant results
  ansible.builtin.debug:
    msg: "{{ grant_fda_result.stdout_lines }}"
  when: grant_fda_result is defined

# Always create and run the grant script to ensure permissions are set correctly
# This is needed because the check might not accurately detect if the TCC database needs initialization
- name: Create script to grant camera permissions
  ansible.builtin.template:
    src: grant_camera_permissions.sh.j2
    dest: /tmp/grant_camera_permissions.sh
    mode: "0755"
  changed_when: true

- name: Run script to grant camera permissions
  ansible.builtin.command: /tmp/grant_camera_permissions.sh
  register: grant_camera_result
  changed_when: true
  failed_when: false

- name: Display camera permission grant results
  ansible.builtin.debug:
    msg: "{{ grant_camera_result.stdout_lines }}"
  when: grant_camera_result is defined

- name: Display grant camera result (debug)
  ansible.builtin.debug:
    msg: |
      Grant camera result available: {{ grant_camera_result is defined }}
      Need camera permissions: {{ need_camera_permissions }}
      Grant camera result: {{ grant_camera_result.stdout_lines if grant_camera_result is defined else 'Not available' }}

# Verify camera access
- name: Check if camera permissions are granted
  ansible.builtin.set_fact:
    camera_permissions_granted:
      "{{ api_access_status == 'Granted' and tracker_access_status == 'Granted' and setsid_access_status == 'Granted' and nohup_access_status == 'Granted' and
      bash_access_status == 'Granted' and tailscale_access_status == 'Granted' and terminal_access_status == 'Granted' and ssh_access_status == 'Granted' and
      ffmpeg_access_status == 'Granted' }}"

- name: Debug camera permissions granted status
  ansible.builtin.debug:
    msg: |
      Camera permissions granted status: {{ camera_permissions_granted }}
      Individual statuses:
      - API: {{ api_access_status }}
      - Tracker: {{ tracker_access_status }}
      - setsid: {{ setsid_access_status }}
      - nohup: {{ nohup_access_status }}
      - bash: {{ bash_access_status }}
      - Tailscale: {{ tailscale_access_status }}
      - Terminal: {{ terminal_access_status }}
      - SSH: {{ ssh_access_status }}
      - ffmpeg: {{ ffmpeg_access_status }}

- name: Create script to verify camera access
  ansible.builtin.template:
    src: verify_camera_access.sh.j2
    dest: /tmp/verify_camera_access.sh
    mode: "0755"
  changed_when: true

- name: Run script to verify camera access
  ansible.builtin.command: /tmp/verify_camera_access.sh
  register: verify_camera_result
  changed_when: false

- name: Display verify camera result
  ansible.builtin.debug:
    msg: "{{ verify_camera_result.stdout_lines }}"
  when: verify_camera_result is defined

# Verify camera permissions after granting
- name: Create script to verify camera permissions
  ansible.builtin.template:
    src: verify_camera_permissions.sh.j2
    dest: /tmp/verify_camera_permissions.sh
    mode: "0755"
  changed_when: false

- name: Run script to verify camera permissions
  ansible.builtin.command: /tmp/verify_camera_permissions.sh
  register: verify_permissions_result
  changed_when: false

- name: Display verify permissions result
  ansible.builtin.debug:
    msg: "{{ verify_permissions_result.stdout_lines }}"

- name: Camera permissions status
  ansible.builtin.debug:
    msg: |
      Camera Permissions:
      {% if camera_permissions_granted == 'True' or camera_permissions_granted == 'true' %}
        Camera permissions are already correctly granted to all applications
      {% elif grant_camera_result is defined %}
        Camera permissions were successfully granted
      {% else %}
      ERROR: Camera permissions may require manual intervention
         Please check System Settings > Privacy & Security > Camera
      {% endif %}

      {% if shared_memory_status == 'Yes' and tracker_running_status == 'Yes' %}
      [INFO] Tracker is running and using the camera via shared memory
      {% if tracker_accessible_status == 'Yes' %}
        Tracker's camera feed is accessible via HTTP
      {% else %}
      WARNING: Tracker's camera feed is not accessible via HTTP
      {% endif %}

      Note: The device-api has been configured to proxy the Tracker's camera feed
      instead of accessing the camera directly.
      {% endif %}

# Summary message for skipped camera permissions
- name: Camera permissions summary (when skipped)
  ansible.builtin.debug:
    msg: |
      Camera permissions configuration was skipped because Python virtual environments
      are not present. This is normal for infrastructure-only deployments.

      To enable camera permissions later:
      1. Deploy device-api and tracker components first
      2. Re-run the security role or full deployment
  when: skip_camera_permissions | default(false)
