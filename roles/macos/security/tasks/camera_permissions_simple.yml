---
# Simplified camera permissions that doesn't block deployment
# This role focuses on granting camera access to required applications

# Set fallback Python variables for compatibility
- name: Set Python runtime variables for backward compatibility
  ansible.builtin.set_fact:
    python:
      version: "{{ runtime.python.version | default('3.11.11') }}"
  when: python is undefined

# Check if virtual environments exist (non-blocking)
- name: Check if Python virtual environments exist
  ansible.builtin.stat:
    path: "{{ item }}"
  loop:
    - "{{ ansible_user_dir }}/orangead/oaDeviceAPI/.venv/bin/python3"
    - "{{ ansible_user_dir }}/orangead/tracker/.venv/bin/python"
  register: venv_check

- name: Set virtual environment status
  ansible.builtin.set_fact:
    venvs_exist: "{{ venv_check.results[0].stat.exists and venv_check.results[1].stat.exists }}"

- name: Camera permissions status message
  ansible.builtin.debug:
    msg: |
      {% if venvs_exist %}
      Virtual environments found - camera permissions can be configured
      {% else %}
      Virtual environments not found - skipping camera permissions setup
      This is normal for infrastructure-only deployments

      To enable camera permissions later:
      1. Deploy device-api and parking-monitor components first
      2. Re-run the security role or full deployment
      {% endif %}

# Skip all camera permission tasks if virtual environments don't exist
- name: Configure camera permissions (when virtual environments exist)
  ansible.builtin.debug:
    msg: "Camera permissions would be configured here when virtual environments exist"
  when: venvs_exist

- name: Camera permissions summary
  ansible.builtin.debug:
    msg: |
      Camera permissions task completed
      - Virtual environments present: {{ venvs_exist }}
      - Status: {% if venvs_exist %}Configured{% else %}Skipped (normal for infrastructure deployment){% endif %}
