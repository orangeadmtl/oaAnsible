---
# Tasks for macOS security configuration

- name: MacOS Security configuration
  tags: ["security"]
  block:
    - name: Configure macOS Firewall
      tags: ["firewall"]
      block:
        - name: Disable macOS Firewall
          ansible.builtin.command: /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off
          become: true
          register: firewall_global_state_result
          # Changed if it wasn't already off. stdout for "off" can be "Firewall is disabled. (State = 0)" or just empty if already off.
          # stderr might say "Firewall already disabled." if it was already off.
          changed_when: >
            firewall_global_state_result.rc == 0 and "already disabled" not in (firewall_global_state_result.stderr | default('')) and "Firewall is disabled"
            not in (firewall_global_state_result.stdout | default(''))
          failed_when: false # Don't fail if it's already off or other benign messages

        - name: Allow SSH connections
          ansible.builtin.command: /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/sbin/sshd
          become: true
          register: ssh_firewall_result
          changed_when: "'already has a rule' not in (ssh_firewall_result.stdout | default('') + ssh_firewall_result.stderr | default(''))"
          failed_when: false

    - name: Allow Tailscale CLI App (if exists, for user interactions)
      ansible.builtin.command: /usr/libexec/ApplicationFirewall/socketfilterfw --add /Applications/Tailscale.app
      become: true
      register: tailscale_app_firewall_result
      changed_when: "'already has a rule' not in (tailscale_app_firewall_result.stdout | default('') + tailscale_app_firewall_result.stderr | default(''))"
      failed_when: false # Path might not exist if only daemon is used

    - name: Allow Tailscale Daemon (tailscaled) - system path
      ansible.builtin.command: /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/bin/tailscaled
      become: true
      register: tailscaled_firewall_result
      changed_when: "'already has a rule' not in (tailscaled_firewall_result.stdout | default('') + tailscaled_firewall_result.stderr | default(''))"
      failed_when: false # Don't fail, but we need it to succeed

    - name: Allow Tailscale Daemon (tailscaled) - user compiled path
      ansible.builtin.command: /usr/libexec/ApplicationFirewall/socketfilterfw --add {{ ansible_user_dir }}/go/bin/tailscaled
      become: true
      register: tailscaled_user_firewall_result
      changed_when: "'already has a rule' not in (tailscaled_user_firewall_result.stdout | default('') + tailscaled_user_firewall_result.stderr | default(''))"
      failed_when: false # Don't fail, path might not exist

    - name: Unblock Tailscale Daemon (tailscaled) - system path
      ansible.builtin.command: /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/bin/tailscaled
      become: true
      register: tailscaled_unblock_result
      changed_when:
        tailscaled_unblock_result.rc == 0 and "not blocked" not in (tailscaled_unblock_result.stdout | default('') + tailscaled_unblock_result.stderr |
        default(''))
      failed_when: false # It's okay if it wasn't blocked

    - name: Unblock Tailscale Daemon (tailscaled) - user compiled path
      ansible.builtin.command: /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp {{ ansible_user_dir }}/go/bin/tailscaled
      become: true
      register: tailscaled_user_unblock_result
      changed_when:
        tailscaled_user_unblock_result.rc == 0 and "not blocked" not in (tailscaled_user_unblock_result.stdout | default('') +
        tailscaled_user_unblock_result.stderr | default(''))
      failed_when: false # It's okay if it wasn't blocked or doesn't exist

    - name: Allow macOS API (Python)
      ansible.builtin.command: /usr/libexec/ApplicationFirewall/socketfilterfw --add {{ ansible_user_dir }}/orangead/oaDeviceAPI/.venv/bin/python3
      become: true
      register: api_firewall_result
      changed_when: "'already has a rule' not in (api_firewall_result.stdout | default('') + api_firewall_result.stderr | default(''))"
      failed_when: false # Path might not exist until deployment

    - name: Restart Firewall Service to apply changes (macOS 10.15 Catalina and earlier)
      ansible.builtin.command: pkill -HUP socketfilterfw # Sends HUP signal to reload config
      become: true
      changed_when: false # This action itself doesn't indicate a config change, the rules do
      failed_when: false
      when: ansible_distribution_version is version('10.15', '<=')

    - name: Reload Firewall Service (macOS 11 Big Sur and newer - more involved)
      # For newer macOS, directly manipulating ALF via socketfilterfw for immediate effect on new rules
      # without a GUI interaction or reboot can be tricky. The --add command *should* be enough.
      # If issues persist, a more forceful "kickstart" or even a temporary disable/enable might be needed,
      # but this can be disruptive. Let's assume --add and --unblockapp are sufficient for now.
      # A reboot after provisioning is the most foolproof way if prompts persist.
      ansible.builtin.debug:
        msg: "Firewall rules updated. A reboot may be required for all changes to take full effect without prompts on macOS Big Sur or newer."
      when: ansible_distribution_version is version('11.0', '>=')

- name: Configure screen lock after inactivity
  block:
    - name: Require password after screen saver
      ansible.builtin.command: defaults write com.apple.screensaver askForPassword -int 1
      become: true
      changed_when: false

    - name: Set password delay to 5 seconds
      ansible.builtin.command: defaults write com.apple.screensaver askForPasswordDelay -int 5
      become: true
      changed_when: false

- name: Check FileVault status
  ansible.builtin.command: fdesetup status
  register: filevault_status
  changed_when: false
  failed_when: false
  become: true

- name: Display FileVault status
  ansible.builtin.debug:
    msg: "FileVault status: {{ filevault_status.stdout }}"

- name: Configure Gatekeeper settings
  block:
    - name: Enable Gatekeeper
      ansible.builtin.command: spctl --master-enable
      become: true
      register: gatekeeper_result
      changed_when: false # This command is idempotent in effect
      failed_when: false

    # The command 'spctl --global-level appstore' is not valid.
    # Correct way is to ensure it's not set to 'disable' or 'allow all'.
    # 'spctl --master-enable' usually defaults to "App Store and identified developers".
    # We can verify the current setting if needed.
    - name: Check Gatekeeper current assessment source setting
      ansible.builtin.command: spctl --status
      register: gatekeeper_status_check
      changed_when: false
      become: true

    - name: Display Gatekeeper status
      ansible.builtin.debug:
        msg: "Gatekeeper status: {{ gatekeeper_status_check.stdout }}"

- name: Configure basic password policies
  block:
    - name: Set minimum password length
      ansible.builtin.command: pwpolicy -n /Local/Default -setglobalpolicy "minChars=8"
      become: true
      register: pwpolicy_result
      changed_when: false # Idempotent if already set
      failed_when: false # This might require additional authentication

    - name: Display password policy result
      ansible.builtin.debug:
        msg: "Password policy result: {{ pwpolicy_result.stdout | default('Command may require interactive authentication or no change made') }}"
      when: pwpolicy_result is defined

# Include camera permissions tasks (skip for ALPR-only deployments)
- name: Include camera permissions tasks
  ansible.builtin.include_tasks: camera_permissions.yml
  when: security_scope | default('full') != 'alpr_camera'

# Include automation permissions tasks
- name: Include automation permissions tasks
  ansible.builtin.include_tasks: automation_permissions.yml
  tags: ["automation", "permissions"]
