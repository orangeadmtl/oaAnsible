#!/bin/bash
# Template for granting camera permissions
# This script grants camera permissions to various applications in the TCC database

# TCC database paths - both user and system level
USER_TCC_DB="{{ ansible_user_dir }}/Library/Application Support/com.apple.TCC/TCC.db"
SYSTEM_TCC_DB="/Library/Application Support/com.apple.TCC/TCC.db"

# Define the applications and their client types
declare -a apps
declare -a client_types

# Add the real Python executable (not just symlinks)
apps+=("{{ python_execs.real_api }}")
client_types+=(1)

# Add the virtual environment Python executables
apps+=("{{ api_python }}")
client_types+=(1)

apps+=("{{ tracker_python }}")
client_types+=(1)

# Add setsid for tracker (used in start.sh script)
# Use the setsid path found by Ansible
apps+=("{{ setsid_path.stdout }}")
client_types+=(1)

# Add nohup for new tracker execution chain (start_detection.sh uses nohup)
apps+=("/usr/bin/nohup")
client_types+=(1)

# Add bash for shell execution
apps+=("/bin/bash")
client_types+=(1)

# Add other required applications
apps+=("/usr/local/bin/tailscaled")
client_types+=(1)

apps+=("{{ ansible_user_dir }}/go/bin/tailscaled")
client_types+=(1)

apps+=("/usr/libexec/sshd-keygen-wrapper")
client_types+=(1)

apps+=("com.apple.Terminal")
client_types+=(0)

# Add direct ffmpeg binary for CamGuard video recording
apps+=("/opt/homebrew/bin/ffmpeg")
client_types+=(1)

# Function to grant permissions to a TCC database
grant_permissions_to_db() {
    local tcc_db="$1"
    local db_type="$2"
    
    echo "Granting camera permissions to $db_type TCC database: $tcc_db"
    
    # Check if the TCC database exists
    if [ ! -f "$tcc_db" ]; then
        echo "$db_type TCC database does not exist at $tcc_db"
        if [ "$db_type" = "User" ]; then
            echo "Attempting to create user TCC database directory"
            mkdir -p "$(dirname "$tcc_db")" 2>/dev/null
            echo "User TCC database will be created by the system when needed"
        fi
        return 1
    fi
    
    # Try to fix permissions on the TCC database if needed
    if [ "$db_type" = "User" ]; then
        chown "$(whoami)" "$tcc_db" 2>/dev/null
        chmod 644 "$tcc_db" 2>/dev/null
    else
        # For system database, we're already running as sudo
        chmod 644 "$tcc_db" 2>/dev/null
    fi
    
    # Check if we can access the database at all
    if ! sqlite3 "$tcc_db" "SELECT name FROM sqlite_master WHERE type='table';" &>/dev/null; then
        echo "WARNING: Cannot access $db_type TCC database, it may be locked by the system"
        echo "Will try to proceed anyway"
    fi
    
    # Check if kTCCServiceCamera exists in the schema
    service_exists=$(sqlite3 "$tcc_db" "SELECT count(*) FROM sqlite_master WHERE type='table' AND name='access';" 2>/dev/null || echo "0")
    
    if [ "$service_exists" = "0" ]; then
        echo "The access table doesn't exist in the TCC database. This is unexpected."
        echo "Attempting to continue anyway - the system may create the table when needed"
    fi
    
    # Check if any camera permissions exist at all
    camera_exists=$(sqlite3 "$tcc_db" "SELECT count(*) FROM access WHERE service='kTCCServiceCamera';" 2>/dev/null || echo "0")
    
    if [ "$camera_exists" = "0" ]; then
        echo "No camera permissions found in the database. Will create new entries."
        
        # Check if we need to initialize the schema for camera permissions
        # This helps on fresh systems where camera permissions haven't been accessed yet
        echo "Checking if we need to initialize camera permissions schema..."
        
        # Get the schema for the access table
        table_schema=$(sqlite3 "$tcc_db" ".schema access" 2>/dev/null || echo "")
        
        # Check if the schema contains kTCCServiceCamera in the allowed services
        if [[ "$table_schema" != *"kTCCServiceCamera"* && "$table_schema" != "" ]]; then
            echo "Camera service not found in schema. This might be a fresh system."
            echo "Will attempt to create camera permissions anyway."
        fi
    fi
    
    # Loop over the applications
    for i in "${!apps[@]}"; do
        app=${apps[$i]}
        client_type=${client_types[$i]}
        
        echo "Processing $app (client_type=$client_type)"
        
        # First try to delete any existing record to ensure a clean state
        sqlite3 "$tcc_db" "DELETE FROM access WHERE service='kTCCServiceCamera' AND client='$app';" 2>/dev/null
        echo "    Cleared any existing records for $app"
        
        # Get the columns in the access table to handle schema variations
        columns=$(sqlite3 "$tcc_db" "PRAGMA table_info(access);" 2>/dev/null | grep -v "^$" | wc -l || echo "0")
        echo "    Detected $columns columns in access table"
        
        # Try all possible insert methods in order of preference
        # We'll try multiple approaches to maximize chances of success
        
        # Method 1: Modern TCC schema with all fields (macOS 10.15+)
        echo "    Trying modern schema insert with all fields..."
        sqlite3 "$tcc_db" "INSERT INTO access (service, client, client_type, auth_value, auth_reason, auth_version, indirect_object_identifier, flags) 
            VALUES ('kTCCServiceCamera', '$app', $client_type, 2, 3, 1, 'UNUSED', 0);" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            echo "    Successfully inserted record for $app (modern schema, all fields)"
            continue
        fi
        
        # Method 2: Modern schema with minimal fields
        echo "    Trying modern schema insert with minimal fields..."
        sqlite3 "$tcc_db" "INSERT INTO access (service, client, client_type, auth_value) 
            VALUES ('kTCCServiceCamera', '$app', $client_type, 2);" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            echo "    Successfully inserted record for $app (modern schema, minimal fields)"
            continue
        fi
        
        # Method 3: Older TCC schema (pre-Catalina)
        echo "    Trying older schema insert..."
        sqlite3 "$tcc_db" "INSERT INTO access (service, client, client_type, allowed, prompt_count) 
            VALUES ('kTCCServiceCamera', '$app', $client_type, 1, 1);" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            echo "    Successfully inserted record for $app (older schema)"
            continue
        fi
        
        # Method 4: Older schema with minimal fields
        echo "    Trying older schema insert with minimal fields..."
        sqlite3 "$tcc_db" "INSERT INTO access (service, client, client_type, allowed) 
            VALUES ('kTCCServiceCamera', '$app', $client_type, 1);" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            echo "    Successfully inserted record for $app (older schema, minimal fields)"
            continue
        fi
        
        # Method 5: Last resort - try to determine schema and create a custom insert
        echo "    All standard inserts failed. Attempting to analyze schema..."
        
        # Get column names
        column_names=$(sqlite3 "$tcc_db" "PRAGMA table_info(access);" 2>/dev/null | awk -F'|' '{print $2}' | tr '\n' ' ' || echo "")
        
        if [[ ! -z "$column_names" ]]; then
            echo "    Found columns: $column_names"
            
            # Check for critical columns
            if [[ "$column_names" == *"service"* && "$column_names" == *"client"* ]]; then
                echo "    Creating custom insert based on available columns"
                
                # Build a custom insert statement
                insert_cols="service, client"
                insert_vals="'kTCCServiceCamera', '$app'"
                
                if [[ "$column_names" == *"client_type"* ]]; then
                    insert_cols="$insert_cols, client_type"
                    insert_vals="$insert_vals, $client_type"
                fi
                
                if [[ "$column_names" == *"auth_value"* ]]; then
                    insert_cols="$insert_cols, auth_value"
                    insert_vals="$insert_vals, 2"
                elif [[ "$column_names" == *"allowed"* ]]; then
                    insert_cols="$insert_cols, allowed"
                    insert_vals="$insert_vals, 1"
                fi
                
                # Execute the custom insert
                sqlite3 "$tcc_db" "INSERT INTO access ($insert_cols) VALUES ($insert_vals);" 2>/dev/null
                
                if [ $? -eq 0 ]; then
                    echo "    Successfully inserted record with custom schema for $app"
                    continue
                fi
            fi
        fi
        
        echo "    All insert attempts failed for $app. Manual intervention may be required."
    done
}

# Reset TCC database if needed (this is aggressive but effective)
reset_tcc_if_needed() {
    local tcc_db=$1
    local db_type=$2
    
    if [ ! -f "$tcc_db" ]; then
        echo "$db_type TCC database does not exist, cannot reset"
        return
    fi
    
    # Check if we can access the database
    if ! sqlite3 "$tcc_db" "SELECT count(*) FROM sqlite_master;" &>/dev/null; then
        echo "WARNING: Cannot access $db_type TCC database, it may be locked or corrupted"
        return
    fi
    
    # Only reset if we have serious issues
    camera_entries=$(sqlite3 "$tcc_db" "SELECT count(*) FROM access WHERE service='kTCCServiceCamera';" 2>/dev/null || echo "0")
    
    if [ "$camera_entries" = "0" ]; then
        echo "No camera entries found in $db_type TCC database"
        # We'll try to create them rather than reset
    fi
}

# Grant permissions to user-level TCC database
echo "\n===== ATTEMPTING USER-LEVEL TCC DATABASE PERMISSIONS =====\n"

# Check if we can access the user TCC database
if sqlite3 "$USER_TCC_DB" "SELECT count(*) FROM sqlite_master;" &>/dev/null; then
    echo "User TCC database is accessible"
    reset_tcc_if_needed "$USER_TCC_DB" "User"
    grant_permissions_to_db "$USER_TCC_DB" "User"
else
    echo "WARNING: User TCC database is not accessible (authorization denied)"
    echo "This is normal on macOS with System Integrity Protection enabled"
    echo "Skipping user-level TCC database modifications"
    echo "Camera permissions will be set at system level instead"
fi

# Grant permissions to system-level TCC database (requires sudo)
echo "\n===== ATTEMPTING SYSTEM-LEVEL TCC DATABASE PERMISSIONS =====\n"
echo "Granting permissions to system-level TCC database (requires sudo)..."
sudo bash -c "
$(declare -f grant_permissions_to_db)
$(declare -f reset_tcc_if_needed)
$(declare -p apps)
$(declare -p client_types)
reset_tcc_if_needed '$SYSTEM_TCC_DB' 'System'
grant_permissions_to_db '$SYSTEM_TCC_DB' 'System'
"

echo "\n===== CAMERA PERMISSIONS OPERATION COMPLETE =====\n"
echo "Camera permissions granted to all applications"

# Verify the permissions
echo -e "\nVerifying camera permissions:"
echo "User TCC database:"
sqlite3 "$USER_TCC_DB" "SELECT service, client, client_type, auth_value, auth_reason FROM access WHERE service='kTCCServiceCamera';" 2>/dev/null || echo "Error accessing user TCC database"

echo -e "\nSystem TCC database:"
sudo sqlite3 "$SYSTEM_TCC_DB" "SELECT service, client, client_type, auth_value, auth_reason FROM access WHERE service='kTCCServiceCamera';" 2>/dev/null || echo "Error accessing system TCC database"

# Test camera access
echo -e "\nTesting camera access:"
cd {{ ansible_user_dir }}/orangead/oaDeviceAPI && {{ api_python }} -c 'import cv2; cap = cv2.VideoCapture(0); print("Camera opened successfully:", cap.isOpened()); cap.release()' 2>/dev/null || echo "Failed to test camera with API python"

echo -e "\nTesting camera access with tracker python:"
cd {{ ansible_user_dir }}/orangead/tracker && {{ tracker_python }} -c 'import cv2; cap = cv2.VideoCapture(0); print("Camera opened successfully:", cap.isOpened()); cap.release()' 2>/dev/null || echo "Failed to test camera with tracker python"
