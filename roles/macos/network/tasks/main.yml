---
- name: Manage DNS Configuration
  become: true
  tags: ["dns", "network", "tailscale"]
  block:
    - name: Get network interface information
      ansible.builtin.shell: |
        set -o pipefail
        route -n get default | grep interface | awk '{print $2}'
      register: network_interface_info
      changed_when: false

    - name: Set network interface fact
      ansible.builtin.set_fact:
        primary_interface: "{{ network_interface_info.stdout }}"

    - name: Get network service list
      ansible.builtin.shell: |
        set -o pipefail
        networksetup -listallnetworkservices | grep -v '*'
      register: network_services
      changed_when: false

    - name: Get hardware port for each service
      ansible.builtin.shell: |
        set -o pipefail
        networksetup -listnetworkserviceorder | grep -B 1 'Device: {{ primary_interface }}' | head -n 1 | awk -F') ' '{print $2}'
      register: network_service_name
      changed_when: false

    - name: Set network service fact
      ansible.builtin.set_fact:
        primary_service: "{{ network_service_name.stdout }}"

    - name: Get current DNS configuration
      ansible.builtin.command: networksetup -getdnsservers "{{ primary_service }}"
      register: current_dns
      changed_when: false
      failed_when: false

    - name: Get DHCP DNS information
      ansible.builtin.command: ipconfig getpacket "{{ primary_interface }}"
      register: dhcp_info
      changed_when: false

    - name: Set DHCP DNS servers fact
      ansible.builtin.set_fact:
        # Correctly assign a list by letting Jinja2 directly return the list structure
        dhcp_dns_servers_list:
          "{% set dns_raw = dhcp_info.stdout | regex_findall('domain_name_server \\(ip_mult\\): \\{([^\\}]*)\\}') %}{% if dns_raw and dns_raw[0] %}{{
          dns_raw[0].split(',') | map('trim') | map('regex_replace', '[{}]', '') | list }}{% else %}[]{% endif %}"

    - name: Define fallback public DNS servers
      ansible.builtin.set_fact:
        public_dns_servers:
          - "1.1.1.1"
          - "8.8.8.8"

    - name: Configure DNS servers
      vars:
        final_dns_list: >-
          {{ (dhcp_dns_servers_list + public_dns_servers + (macos_dns.tailscale_servers | default([]))) | unique | list }}
      ansible.builtin.command: >-
        networksetup -setdnsservers "{{ primary_service }}" {{ final_dns_list | join(' ') }}
      when: features.tailscale_configuration | default(false) | bool and final_dns_list | length > 0
      register: dns_result
      changed_when: dns_result.rc == 0 and (current_dns.stdout_lines | default([]) | join(' ') != final_dns_list | join(' '))

    - name: Store original DNS configuration (from DHCP if available)
      ansible.builtin.copy:
        content: "{{ dhcp_dns_servers_list | join('\\n') }}"
        dest: "{{ ansible_env.HOME }}/.dns_backup_dhcp"
        mode: "0600"
      when: features.tailscale_configuration | default(false) | bool and dhcp_dns_servers_list | length > 0

- name: Configure Database DNS Override
  become: true
  tags: ["dns", "network", "database"]
  block:
    - name: Backup original /etc/hosts
      ansible.builtin.copy:
        src: /etc/hosts
        dest: /etc/hosts.backup
        backup: true
        mode: "0644"

    - name: Override detectiondb.orangead.ca with Tailscale IP
      ansible.builtin.blockinfile:
        path: /etc/hosts
        marker: "# {mark} ORANGEAD DATABASE OVERRIDE"
        block: |
          100.66.164.99 detectiondb.orangead.ca  # Force Tailscale routing
        create: true
        mode: "0644"

- name: Configure Wi-Fi Networks
  ansible.builtin.include_tasks: wifi_configuration.yml
  tags: ["wifi", "network"]
  when: network.configure_wifi | default(false)
