---
# Python environment setup tasks using uv
# Creates and configures the Python environment using uv for parking monitor

- name: Check if uv is installed
  ansible.builtin.shell: |
    if command -v uv >/dev/null 2>&1; then
      echo "installed"
    else
      echo "not_found"
    fi
  register: uv_check
  changed_when: false

- name: Install uv if not present
  ansible.builtin.shell: |
    curl -LsSf https://astral.sh/uv/install.sh | sh
    source $HOME/.cargo/env
  when: uv_check.stdout == "not_found"
  register: uv_install

- name: Set uv path for session
  ansible.builtin.set_fact:
    uv_binary: "{{ ansible_user_dir }}/.cargo/bin/uv"
  when: uv_install is defined and uv_install.changed

- name: Set uv path for existing installation
  ansible.builtin.set_fact:
    uv_binary: "uv"
  when: uv_check.stdout == "installed"

- name: Initialize uv project and install dependencies
  ansible.builtin.shell: |
    cd "{{ parking_monitor_repository.destination }}"
    if [ -f "$HOME/.cargo/env" ]; then
      source $HOME/.cargo/env
    fi
    {{ uv_binary }} sync
  register: uv_sync
  environment:
    PATH: "{{ ansible_user_dir }}/.cargo/bin:{{ ansible_env.PATH }}"

- name: Verify critical imports with uv
  ansible.builtin.shell: |
    cd "{{ parking_monitor_repository.destination }}"
    if [ -f "$HOME/.cargo/env" ]; then
      source $HOME/.cargo/env
    fi
    {{ uv_binary }} run python -c "
    try:
        import ultralytics, torch, cv2, fastapi, uvicorn, pydantic
        print('[OK] All critical imports successful')
    except ImportError as e:
        print(f'[FAIL] Import error: {e}')
        exit(1)
    "
  register: import_test
  changed_when: false
  failed_when: import_test.rc != 0
  environment:
    PATH: "{{ ansible_user_dir }}/.cargo/bin:{{ ansible_env.PATH }}"

- name: Check PyTorch MPS availability
  ansible.builtin.shell: |
    cd "{{ parking_monitor_repository.destination }}"
    if [ -f "$HOME/.cargo/env" ]; then
      source $HOME/.cargo/env
    fi
    {{ uv_binary }} run python -c "
    import torch
    if torch.backends.mps.is_available():
        print('[OK] MPS (Metal Performance Shaders) available')
    else:
        print('[WARNING]  MPS not available - falling back to CPU')
    "
  register: mps_check
  changed_when: false
  environment:
    PATH: "{{ ansible_user_dir }}/.cargo/bin:{{ ansible_env.PATH }}"

- name: Get Python version from uv environment
  ansible.builtin.shell: |
    cd "{{ parking_monitor_repository.destination }}"
    if [ -f "$HOME/.cargo/env" ]; then
      source $HOME/.cargo/env
    fi
    {{ uv_binary }} run python --version
  register: python_version
  changed_when: false
  environment:
    PATH: "{{ ansible_user_dir }}/.cargo/bin:{{ ansible_env.PATH }}"

# Native activate_env.sh script is provided by oaParkingMonitor repository
# No need to generate it - repository includes all necessary scripts

- name: Python environment setup summary
  ansible.builtin.debug:
    msg: |
      [PYTHON] Python Environment Setup Complete (uv):
      =========================================
      Python Version: {{ python_version.stdout }}
      Package Manager: uv (modern Python package management)
      Project Path: {{ parking_monitor_repository.destination }}
      Critical Imports: {{ '[OK] Success' if import_test.rc == 0 else '[FAIL] Failed' }}
      MPS Acceleration: {{ mps_check.stdout }}
      Activation Script: {{ parking_monitor_repository.destination }}/scripts/activate_env.sh (native)
      =========================================
