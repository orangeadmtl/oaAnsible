---
# Service setup tasks
# Creates and configures the LaunchAgent service for parking monitor

- name: Create LaunchAgents directory
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/Library/LaunchAgents"
    state: directory
    mode: "0755"

- name: Generate LaunchAgent plist
  ansible.builtin.template:
    src: com.orangead.parking-monitor.plist.j2
    dest: "{{ parking_monitor_launchd.plist_path }}"
    mode: "0644"
    backup: false
  notify: restart parking monitor

- name: Create scripts directory
  ansible.builtin.file:
    path: "{{ parking_monitor_repository.destination }}/scripts"
    state: directory
    mode: "0755"

# Native aliases.sh script is provided by oaParkingMonitor repository
# No need to generate it - repository includes all necessary scripts

- name: Find all shell scripts in scripts directory for service setup
  ansible.builtin.find:
    paths: "{{ parking_monitor_repository.destination }}/scripts"
    patterns: "*.sh"
  register: service_scripts

- name: Verify all shell scripts are executable
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: "0755"
  loop: "{{ service_scripts.files }}"

- name: Enhanced service cleanup and restart
  block:
    - name: Stop existing service completely
      ansible.builtin.shell: |
        # Multiple approaches to ensure service is fully stopped
        launchctl unload "{{ parking_monitor_launchd.plist_path }}" 2>/dev/null || true
        launchctl stop "{{ parking_monitor_service.name }}" 2>/dev/null || true
        sleep 2
        # Kill any lingering processes
        pkill -f "parking.monitor" || true
        pkill -f "parking-monitor" || true
        sleep 1
      ignore_errors: true
      changed_when: false

    - name: Verify service is fully stopped
      ansible.builtin.shell: |
        launchctl list | grep "{{ parking_monitor_service.name }}" || echo "not_running"
      register: service_check_stop
      changed_when: false

    - name: Report service stop status
      ansible.builtin.debug:
        msg: |
          [SVC] Service stop status: {{ 'Stopped' if 'not_running' in service_check_stop.stdout else 'Still running - will force restart' }}

- name: Load LaunchAgent service with enhanced error handling
  ansible.builtin.shell: |
    launchctl load "{{ parking_monitor_launchd.plist_path }}"
  register: service_load

- name: Wait for service to initialize
  ansible.builtin.pause:
    seconds: 10
    prompt: "Waiting for parking monitor service to initialize..."

- name: Check service status
  ansible.builtin.shell: |
    launchctl list | grep "{{ parking_monitor_service.name }}" || echo "not_running"
  register: service_status
  changed_when: false

- name: Verify service is loaded
  ansible.builtin.assert:
    that:
      - "'not_running' not in service_status.stdout"
    fail_msg: "Service failed to load. Check logs: tail -f {{ parking_monitor_launchd.standard_error_path }}"
    success_msg: "[OK] Service loaded successfully"

- name: Service setup summary
  ansible.builtin.debug:
    msg: |
      [LAUNCH] Service Setup Complete:
      =========================
      Service Name: {{ parking_monitor_service.name }}
      LaunchAgent: {{ parking_monitor_launchd.plist_path }}
      Status: {{ 'Running' if 'not_running' not in service_status.stdout else 'Failed to start' }}
      Environment: {{ parking_monitor_environment.PARKING_MONITOR_ENV }}

      Management Commands:
      • Start:   launchctl load {{ parking_monitor_launchd.plist_path }}
      • Stop:    launchctl unload {{ parking_monitor_launchd.plist_path }}
      • Status:  launchctl list | grep {{ parking_monitor_service.name }}
      • Health:  {{ parking_monitor_repository.destination }}/scripts/health_check.sh
      • Setup:   {{ parking_monitor_repository.destination }}/scripts/setup.sh
      • Native:  {{ parking_monitor_repository.destination }}/scripts/start.sh
      • Logs:    tail -f {{ parking_monitor_launchd.standard_out_path }}
      ========================="
