---
# Configuration management tasks
# Creates and manages configuration files for the parking monitor service

- name: Deploy YHU-specific configuration for preprod
  ansible.builtin.copy:
    src: "yhu-preprod-config.yaml"
    dest: "{{ parking_monitor_repository.destination }}/config/preprod.yaml"
    mode: "0644"
    backup: true
  when: 
    - target_env == 'yhu-preprod'
    - inventory_hostname == 'f1-ca-014'
  notify: reload parking monitor

- name: Copy specific environment configuration (if specified)
  ansible.builtin.copy:
    src: "{{ parking_monitor_config_template | default('') }}"
    dest: "{{ parking_monitor_repository.destination }}/config.yaml"
    mode: "0644"
    backup: "{{ parking_monitor_backup.config_backup | default(true) }}"
  when: parking_monitor_config_template is defined and parking_monitor_config_template != ''
  notify: reload parking monitor

- name: Create configuration from template (default)
  ansible.builtin.template:
    src: config.yaml.j2
    dest: "{{ parking_monitor_repository.destination }}/config.yaml"
    mode: "0644"
    backup: "{{ parking_monitor_backup.config_backup | default(true) }}"
  when: parking_monitor_config_template is not defined or parking_monitor_config_template == ''
  notify: reload parking monitor

- name: Create environment configuration
  ansible.builtin.template:
    src: parking_monitor.env.j2
    dest: "{{ parking_monitor_repository.destination }}/.env"
    mode: "0600" # Sensitive environment variables
  notify: reload parking monitor

- name: Create logging configuration
  ansible.builtin.template:
    src: logging.yaml.j2
    dest: "{{ parking_monitor_repository.destination }}/logging.yaml"
    mode: "0644"

- name: Validate configuration syntax
  ansible.builtin.shell: |
    cd "{{ parking_monitor_repository.destination }}"
    if [ -f .venv/bin/python ]; then
      PYTHON_BIN=".venv/bin/python"
    else
      PYTHON_BIN="python3"
    fi
    $PYTHON_BIN -c "
    import yaml
    import os

    # Validate main config
    try:
        with open('config.yaml', 'r') as f:
            config = yaml.safe_load(f)
        print('[OK] config.yaml syntax valid')
    except yaml.YAMLError as e:
        print(f'[FAIL] config.yaml syntax error: {e}')
        exit(1)
    except FileNotFoundError:
        print('[WARNING]  config.yaml not found - will be created by service')

    # Validate logging config
    try:
        with open('logging.yaml', 'r') as f:
            logging_config = yaml.safe_load(f)
        print('[OK] logging.yaml syntax valid')
    except yaml.YAMLError as e:
        print(f'[FAIL] logging.yaml syntax error: {e}')
        exit(1)
    except FileNotFoundError:
        print('[WARNING]  logging.yaml not found')

    # Check .env file
    if os.path.exists('.env'):
        print('[OK] .env file created')
    else:
        print('[WARNING]  .env file not found')
    "
  register: config_validation
  changed_when: false

- name: Set configuration file permissions
  ansible.builtin.file:
    path: "{{ item }}"
    mode: "0644"
    owner: "{{ parking_monitor_service.user }}"
    group: "{{ parking_monitor_service.group }}"
  loop:
    - "{{ parking_monitor_repository.destination }}/config.yaml"
    - "{{ parking_monitor_repository.destination }}/logging.yaml"
  ignore_errors: true

- name: Secure environment file permissions
  ansible.builtin.file:
    path: "{{ parking_monitor_repository.destination }}/.env"
    mode: "0600"
    owner: "{{ parking_monitor_service.user }}"
    group: "{{ parking_monitor_service.group }}"

- name: Configuration summary
  ansible.builtin.debug:
    msg: |
      [SVC]  Configuration Setup Complete:
      ===============================
      Main Config: {{ parking_monitor_repository.destination }}/config.yaml
      Environment: {{ parking_monitor_repository.destination }}/.env
      Logging: {{ parking_monitor_repository.destination }}/logging.yaml
      Validation: {{ config_validation.stdout }}
      ==============================="
