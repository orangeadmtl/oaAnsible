---
# Security setup tasks
# Configures required permissions and security settings

- name: Check camera permissions
  ansible.builtin.shell: |
    sqlite3 ~/Library/Application\ Support/com.apple.TCC/TCC.db \
    "SELECT service,client,auth_value FROM access WHERE service='kTCCServiceCamera'" 2>/dev/null || echo "no_permissions"
  register: camera_perms_check
  changed_when: false

- name: Request camera permissions
  ansible.builtin.debug:
    msg: |
      [CAMERA] PERMISSIONS REQUIRED:
      ==============================
      The Parking Monitor requires camera access to function.

      To grant permissions:
      1. Go to System Preferences → Security & Privacy → Privacy → Camera
      2. Add the parking monitor application or Python interpreter
      3. Alternatively, run the grant script: {{ parking_monitor_repository.destination }}/scripts/grant_permissions.sh
      ==============================

# Native grant_permissions.sh script is provided by oaParkingMonitor repository
# No need to generate it - repository includes all necessary scripts

# Native verify_permissions.sh script is provided by oaParkingMonitor repository
# No need to generate it - repository includes all necessary scripts

- name: Check firewall status
  ansible.builtin.shell: |
    sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate | grep -i "enabled" || echo "disabled"
  register: firewall_status
  become: false
  changed_when: false

- name: Configure firewall rules (if enabled)
  block:
    - name: Add firewall rule for parking monitor
      ansible.builtin.shell: |
        sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add "{{ parking_monitor_python.env_path }}/bin/python"
        sudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp "{{ parking_monitor_python.env_path }}/bin/python"
      when:
        - "'enabled' in firewall_status.stdout"
        - parking_monitor_security.firewall_rules is defined
      become: true

  rescue:
    - name: Firewall configuration failed
      ansible.builtin.debug:
        msg: |
          [WARNING] Firewall configuration failed. You may need to manually allow the application:
          System Preferences → Security & Privacy → Firewall → Options → Add application

- name: Set secure file permissions
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: "{{ item.mode }}"
    owner: "{{ parking_monitor_service.user }}"
    group: "{{ parking_monitor_service.group }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { path: "{{ parking_monitor_repository.destination }}/.env", mode: "0600" }
    - { path: "{{ parking_monitor_repository.destination }}/logs", mode: "0755", state: "directory" }
    - { path: "{{ parking_monitor_repository.destination }}/scripts", mode: "0755", state: "directory" }
  ignore_errors: true

# Native security_audit.sh script is provided by oaParkingMonitor repository
# No need to generate it - repository includes all necessary scripts

- name: Run security audit
  ansible.builtin.shell: |
    if [ -f "{{ parking_monitor_repository.destination }}/scripts/security_audit.sh" ]; then
      "{{ parking_monitor_repository.destination }}/scripts/security_audit.sh"
    else
      echo "[INFO] Security audit script not found - skipping optional audit"
    fi
  register: security_audit
  changed_when: false

- name: Security setup summary
  ansible.builtin.debug:
    msg: |
      [SECURITY] Setup Complete:
      ==========================
      Camera Permissions: {{ 'Configured' if 'python' in camera_perms_check.stdout else 'Manual setup required' }}
      Firewall: {{ firewall_status.stdout | title }}
      File Permissions: [OK] Configured

      Security Audit Results:
      {{ security_audit.stdout | default('Audit script not found') | indent(width=2) }}

      Next Steps:
      1. Run permission verification: {{ parking_monitor_repository.destination }}/scripts/verify_permissions.sh
      2. Test camera access with a simple camera application
      3. Check security audit: {{ parking_monitor_repository.destination }}/scripts/security_audit.sh
      =========================="
