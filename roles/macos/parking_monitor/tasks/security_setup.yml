---
# Security setup tasks
# Configures required permissions and security settings

- name: Check camera permissions
  shell: |
    sqlite3 ~/Library/Application\ Support/com.apple.TCC/TCC.db \
    "SELECT service,client,auth_value FROM access WHERE service='kTCCServiceCamera'" 2>/dev/null || echo "no_permissions"
  register: camera_perms_check
  changed_when: false

- name: Request camera permissions
  debug:
    msg: |
      üìπ CAMERA PERMISSIONS REQUIRED:
      ==============================
      The Parking Monitor requires camera access to function.
      
      To grant permissions:
      1. Go to System Preferences ‚Üí Security & Privacy ‚Üí Privacy ‚Üí Camera
      2. Add the parking monitor application or Python interpreter
      3. Alternatively, run the grant script: {{ parking_monitor_repository.destination }}/scripts/grant_permissions.sh
      ==============================

- name: Create permission grant script
  copy:
    dest: "{{ parking_monitor_repository.destination }}/scripts/grant_permissions.sh"
    mode: '0755'
    content: |
      #!/bin/bash
      # Permission Grant Script - Generated by Ansible
      echo "üîê Parking Monitor Permission Setup"
      echo "This script helps configure required permissions for parking monitor"
      echo ""
      echo "Required Permissions:"
      echo "‚Ä¢ Camera access for video capture"
      echo "‚Ä¢ Full disk access for file operations"
      echo ""
      echo "Please manually configure these in System Preferences:"
      echo "1. Security & Privacy ‚Üí Camera ‚Üí Add parking monitor"
      echo "2. Security & Privacy ‚Üí Full Disk Access ‚Üí Add parking monitor"
      echo ""
      echo "‚úÖ Permission setup guidance complete"

- name: Create permission verification script
  copy:
    dest: "{{ parking_monitor_repository.destination }}/scripts/verify_permissions.sh"
    mode: '0755'
    content: |
      #!/bin/bash
      # Permission Verification Script - Generated by Ansible
      echo "üîç Verifying Parking Monitor Permissions"
      echo "========================================"
      
      # Check camera permissions
      if sqlite3 ~/Library/Application\ Support/com.apple.TCC/TCC.db \
         "SELECT service,client,auth_value FROM access WHERE service='kTCCServiceCamera'" 2>/dev/null | grep -q python; then
          echo "‚úÖ Camera permissions: GRANTED"
      else
          echo "‚ùå Camera permissions: NOT GRANTED"
      fi
      
      # Check full disk access
      if [[ -r "/Library/Application Support/com.apple.TCC/TCC.db" ]]; then
          echo "‚úÖ Full disk access: GRANTED"
      else
          echo "‚ùå Full disk access: NOT GRANTED"
      fi
      
      echo "========================================"
      echo "‚ÑπÔ∏è  Configure missing permissions in System Preferences"

- name: Check firewall status
  shell: |
    sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate | grep -i "enabled" || echo "disabled"
  register: firewall_status
  become: false
  changed_when: false

- name: Configure firewall rules (if enabled)
  block:
    - name: Add firewall rule for parking monitor
      shell: |
        sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add "{{ parking_monitor_python.env_path }}/bin/python"
        sudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp "{{ parking_monitor_python.env_path }}/bin/python"
      when: 
        - "'enabled' in firewall_status.stdout"
        - parking_monitor_security.firewall_rules is defined
      become: true
      
  rescue:
    - name: Firewall configuration failed
      debug:
        msg: |
          ‚ö†Ô∏è  Firewall configuration failed. You may need to manually allow the application:
          System Preferences ‚Üí Security & Privacy ‚Üí Firewall ‚Üí Options ‚Üí Add application

- name: Set secure file permissions
  file:
    path: "{{ item.path }}"
    mode: "{{ item.mode }}"
    owner: "{{ parking_monitor_service.user }}"
    group: "{{ parking_monitor_service.group }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { path: "{{ parking_monitor_repository.destination }}/.env", mode: "0600" }
    - { path: "{{ parking_monitor_repository.destination }}/config.yaml", mode: "0644" }
    - { path: "{{ parking_monitor_repository.destination }}/logs", mode: "0755", state: "directory" }
    - { path: "{{ parking_monitor_repository.destination }}/scripts", mode: "0755", state: "directory" }
  ignore_errors: true

- name: Create security audit script
  copy:
    dest: "{{ parking_monitor_repository.destination }}/scripts/security_audit.sh"
    mode: '0755'
    content: |
      #!/bin/bash
      # Security Audit Script - Generated by Ansible
      echo "üîí Parking Monitor Security Audit"
      echo "=================================="
      
      # Check file permissions
      echo "üìÅ File Permissions:"
      ls -la "{{ parking_monitor_repository.destination }}"/{.env,config,logs,scripts} 2>/dev/null || echo "  Some files/directories not found (normal for new setup)"
      
      # Check service status
      echo ""
      echo "üöÄ Service Status:"
      if launchctl list | grep -q "{{ parking_monitor_service.name }}"; then
          echo "  ‚úÖ Service is loaded"
      else
          echo "  ‚ùå Service is not loaded"
      fi
      
      # Check network ports
      echo ""
      echo "üåê Network Status:"
      if lsof -i :9091 >/dev/null 2>&1; then
          echo "  ‚úÖ Port 9091 is active"
      else
          echo "  ‚ùå Port 9091 is not active"
      fi
      
      echo "=================================="
      echo "‚úÖ Security audit complete"

- name: Run security audit
  shell: |
    "{{ parking_monitor_repository.destination }}/scripts/security_audit.sh"
  register: security_audit
  changed_when: false

- name: Security setup summary
  debug:
    msg: |
      üîí Security Setup Complete:
      ==========================
      Camera Permissions: {{ 'Configured' if 'python' in camera_perms_check.stdout else 'Manual setup required' }}
      Firewall: {{ firewall_status.stdout | title }}
      File Permissions: ‚úÖ Configured
      
      Security Audit Results:
      {{ security_audit.stdout | default('Audit script not found') | indent(width=2) }}
      
      Next Steps:
      1. Run permission verification: {{ parking_monitor_repository.destination }}/scripts/verify_permissions.sh
      2. Test camera access with a simple camera application
      3. Check security audit: {{ parking_monitor_repository.destination }}/scripts/security_audit.sh
      =========================="