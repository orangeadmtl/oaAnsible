#!/bin/bash
# Health check script for Parking Monitor Service
# Generated by Ansible

set -euo pipefail

# Service configuration
SERVICE_NAME="{{ parking_monitor_service.name }}"
SERVICE_PORT="{{ parking_monitor_service.port }}"
HEALTH_URL="http://localhost:$SERVICE_PORT/health"
TIMEOUT=10

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to log messages
log_info() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] $1${NC}"
}

log_warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] [WARN] $1${NC}"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] $1${NC}" >&2
}

# Health check function
check_health() {
    local exit_code=0
    
    log_info "Checking health of $SERVICE_NAME..."
    
    # Check if port is listening
    if ! lsof -i ":$SERVICE_PORT" >/dev/null 2>&1; then
        log_error "Port $SERVICE_PORT is not listening"
        exit_code=1
    else
        log_info "✓ Port $SERVICE_PORT is listening"
    fi
    
    # Check HTTP health endpoint
    if command -v curl >/dev/null 2>&1; then
        local response
        local http_code
        
        response=$(curl -s -w "%{http_code}" --max-time $TIMEOUT "$HEALTH_URL" 2>/dev/null)
        http_code="${response: -3}"
        
        if [[ "$http_code" == "200" ]]; then
            log_info "✓ Health endpoint responding (HTTP $http_code)"
            # Parse JSON response if available
            local body="${response%???}"
            if command -v python3 >/dev/null 2>&1 && [[ -n "$body" ]]; then
                echo "$body" | python3 -m json.tool 2>/dev/null || echo "$body"
            else
                echo "$body"
            fi
        else
            log_error "Health endpoint not responding properly (HTTP $http_code)"
            exit_code=1
        fi
    else
        log_warn "curl not available, skipping HTTP health check"
    fi
    
    # Check process is running
    if pgrep -f "parking_monitor" >/dev/null 2>&1; then
        log_info "✓ Parking monitor process is running"
    else
        log_error "Parking monitor process not found"
        exit_code=1
    fi
    
    # Check LaunchAgent status
    if launchctl list | grep -q "{{ parking_monitor_service.name }}"; then
        local status=$(launchctl list | grep "{{ parking_monitor_service.name }}" | awk '{print $1}')
        if [[ "$status" == "-" ]]; then
            log_info "✓ LaunchAgent is loaded and running"
        else
            log_warn "LaunchAgent loaded but may have issues (PID: $status)"
        fi
    else
        log_error "LaunchAgent not loaded"
        exit_code=1
    fi
    
    return $exit_code
}

# Main execution
case "${1:-check}" in
    check)
        check_health
        exit $?
        ;;
    *)
        echo "Usage: $0 [check]"
        exit 1
        ;;
esac