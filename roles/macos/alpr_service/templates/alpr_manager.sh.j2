#!/bin/bash
# ALPR Stack Management Script
# Generated by Ansible - Do not edit manually

set -euo pipefail

DOCKER_SERVICE="com.orangead.alpr"
MONITOR_SERVICE="com.orangead.alpr-monitor"
DOCKER_PLIST="{{ ansible_user_dir }}/Library/LaunchAgents/com.orangead.alpr.plist"
MONITOR_PLIST="{{ ansible_user_dir }}/Library/LaunchAgents/com.orangead.alpr-monitor.plist"
CONTAINER_NAME="{{ macos_alpr_container_name }}"
ALPR_PORT="{{ macos_alpr_host_port }}"
HEALTH_SCRIPT="{{ ansible_user_dir }}/orangead/alpr/health_check.sh"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

usage() {
    echo "ALPR Stack Manager"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  start          Start both Docker and Monitor services"
    echo "  stop           Stop both Docker and Monitor services"
    echo "  restart        Restart both services"
    echo "  status         Show status of all services"
    echo "  health         Run comprehensive health check"
    echo "  logs           Show recent logs from all services"
    echo "  docker         Manage Docker service only"
    echo "    docker start       Start Docker service"
    echo "    docker stop        Stop Docker service"
    echo "    docker restart     Restart Docker service"
    echo "    docker status      Show Docker service status"
    echo "  monitor        Manage Monitor service only"
    echo "    monitor start      Start Monitor service"
    echo "    monitor stop       Stop Monitor service"
    echo "    monitor restart    Restart Monitor service"
    echo "    monitor status     Show Monitor service status"
    echo "  cleanup        Clean up old detection images and logs"
    echo "  stats          Show ALPR detection statistics"
    echo ""
}

service_status() {
    local service=$1
    if launchctl list | grep -q "$service"; then
        echo -e "${GREEN}Running${NC}"
    else
        echo -e "${RED}Stopped${NC}"
    fi
}

container_status() {
    if docker ps --filter "name=$CONTAINER_NAME" --format "{{.Names}}" | grep -q "$CONTAINER_NAME"; then
        local status=$(docker ps --filter "name=$CONTAINER_NAME" --format "{{.Status}}")
        echo -e "${GREEN}Running${NC} ($status)"
    else
        echo -e "${RED}Stopped${NC}"
    fi
}

port_status() {
    if nc -z localhost "$ALPR_PORT" 2>/dev/null; then
        echo -e "${GREEN}Open${NC}"
    else
        echo -e "${RED}Closed${NC}"
    fi
}

start_service() {
    local service=$1
    local plist=$2
    local name=$3
    
    echo -e "Starting $name..."
    launchctl unload "$plist" 2>/dev/null || true
    sleep 2
    launchctl load -w "$plist"
    echo -e "${GREEN}[OK]${NC} $name started"
}

stop_service() {
    local service=$1
    local plist=$2
    local name=$3
    
    echo -e "Stopping $name..."
    launchctl unload "$plist" 2>/dev/null || true
    echo -e "${YELLOW}[OK]${NC} $name stopped"
}

restart_service() {
    local service=$1
    local plist=$2
    local name=$3
    
    echo -e "Restarting $name..."
    stop_service "$service" "$plist" "$name"
    sleep 3
    start_service "$service" "$plist" "$name"
}

show_status() {
    echo -e "${BLUE}=== ALPR Stack Status ===${NC}"
    echo ""
    printf "%-20s %s\n" "Docker Service:" "$(service_status $DOCKER_SERVICE)"
    printf "%-20s %s\n" "Monitor Service:" "$(service_status $MONITOR_SERVICE)"
    printf "%-20s %s\n" "Docker Container:" "$(container_status)"
    printf "%-20s %s\n" "ALPR Port:" "$(port_status)"
    echo ""
}

show_logs() {
    echo -e "${BLUE}=== Recent ALPR Logs ===${NC}"
    echo ""
    
    if [[ -f "{{ ansible_user_dir }}/orangead/alpr/logs/alpr.log" ]]; then
        echo -e "${YELLOW}Docker Service Logs (last 10 lines):${NC}"
        tail -n 10 "{{ ansible_user_dir }}/orangead/alpr/logs/alpr.log"
        echo ""
    fi
    
    if [[ -f "{{ ansible_user_dir }}/orangead/alpr/logs/monitor.log" ]]; then
        echo -e "${YELLOW}Monitor Service Logs (last 10 lines):${NC}"
        tail -n 10 "{{ ansible_user_dir }}/orangead/alpr/logs/monitor.log"
        echo ""
    fi
    
    if [[ -f "{{ ansible_user_dir }}/orangead/alpr/logs/health_check.log" ]]; then
        echo -e "${YELLOW}Health Check Logs (last 5 lines):${NC}"
        tail -n 5 "{{ ansible_user_dir }}/orangead/alpr/logs/health_check.log"
        echo ""
    fi
}

cleanup_files() {
    local detection_dir="{{ ansible_user_dir }}/orangead/alpr/detections"
    local logs_dir="{{ ansible_user_dir }}/orangead/alpr/logs"
    
    echo -e "${BLUE}=== ALPR Cleanup ===${NC}"
    echo ""
    
    # Clean up old detection images (older than 7 days)
    if [[ -d "$detection_dir" ]]; then
        local old_images=$(find "$detection_dir" -name "*.jpg" -mtime +7 2>/dev/null | wc -l)
        if [[ $old_images -gt 0 ]]; then
            echo "Cleaning up $old_images old detection images..."
            find "$detection_dir" -name "*.jpg" -mtime +7 -delete 2>/dev/null || true
            find "$detection_dir" -name "*.json" -mtime +7 -delete 2>/dev/null || true
            echo -e "${GREEN}[OK]${NC} Cleanup completed"
        else
            echo "No old detection images to clean up"
        fi
    fi
    
    # Compress old log files
    if [[ -d "$logs_dir" ]]; then
        find "$logs_dir" -name "*.log" -mtime +1 -size +10M -exec gzip {} \; 2>/dev/null || true
        echo -e "${GREEN}[OK]${NC} Log compression completed"
    fi
}

show_stats() {
    local detection_dir="{{ ansible_user_dir }}/orangead/alpr/detections"
    
    echo -e "${BLUE}=== ALPR Detection Statistics ===${NC}"
    echo ""
    
    if [[ -d "$detection_dir" ]]; then
        local total_images=$(find "$detection_dir" -name "*.jpg" 2>/dev/null | wc -l)
        local total_json=$(find "$detection_dir" -name "*.json" 2>/dev/null | wc -l)
        local today_images=$(find "$detection_dir" -name "*.jpg" -mtime -1 2>/dev/null | wc -l)
        
        printf "%-25s %s\n" "Total Images:" "$total_images"
        printf "%-25s %s\n" "Total Detections:" "$total_json"
        printf "%-25s %s\n" "Today's Images:" "$today_images"
        
        if [[ $total_images -gt 0 ]]; then
            local disk_usage=$(du -sh "$detection_dir" 2>/dev/null | cut -f1)
            printf "%-25s %s\n" "Disk Usage:" "$disk_usage"
        fi
    else
        echo "Detection directory not found"
    fi
    echo ""
}

run_health_check() {
    echo -e "${BLUE}=== Running ALPR Health Check ===${NC}"
    echo ""
    
    if [[ -x "$HEALTH_SCRIPT" ]]; then
        "$HEALTH_SCRIPT"
    else
        echo -e "${RED}Health check script not found or not executable${NC}"
        return 1
    fi
}

main() {
    case "${1:-}" in
        "start")
            start_service "$DOCKER_SERVICE" "$DOCKER_PLIST" "Docker Service"
            sleep 5
            start_service "$MONITOR_SERVICE" "$MONITOR_PLIST" "Monitor Service"
            echo ""
            show_status
            ;;
        "stop")
            stop_service "$MONITOR_SERVICE" "$MONITOR_PLIST" "Monitor Service"
            stop_service "$DOCKER_SERVICE" "$DOCKER_PLIST" "Docker Service"
            echo ""
            show_status
            ;;
        "restart")
            echo -e "${BLUE}=== Restarting ALPR Stack ===${NC}"
            echo ""
            restart_service "$MONITOR_SERVICE" "$MONITOR_PLIST" "Monitor Service"
            restart_service "$DOCKER_SERVICE" "$DOCKER_PLIST" "Docker Service"
            sleep 5
            show_status
            ;;
        "status")
            show_status
            ;;
        "health")
            run_health_check
            ;;
        "logs")
            show_logs
            ;;
        "docker")
            case "${2:-}" in
                "start") start_service "$DOCKER_SERVICE" "$DOCKER_PLIST" "Docker Service" ;;
                "stop") stop_service "$DOCKER_SERVICE" "$DOCKER_PLIST" "Docker Service" ;;
                "restart") restart_service "$DOCKER_SERVICE" "$DOCKER_PLIST" "Docker Service" ;;
                "status") 
                    printf "%-20s %s\n" "Docker Service:" "$(service_status $DOCKER_SERVICE)"
                    printf "%-20s %s\n" "Docker Container:" "$(container_status)"
                    ;;
                *) echo "Usage: $0 docker [start|stop|restart|status]" ;;
            esac
            ;;
        "monitor")
            case "${2:-}" in
                "start") start_service "$MONITOR_SERVICE" "$MONITOR_PLIST" "Monitor Service" ;;
                "stop") stop_service "$MONITOR_SERVICE" "$MONITOR_PLIST" "Monitor Service" ;;
                "restart") restart_service "$MONITOR_SERVICE" "$MONITOR_PLIST" "Monitor Service" ;;
                "status") 
                    printf "%-20s %s\n" "Monitor Service:" "$(service_status $MONITOR_SERVICE)"
                    ;;
                *) echo "Usage: $0 monitor [start|stop|restart|status]" ;;
            esac
            ;;
        "cleanup")
            cleanup_files
            ;;
        "stats")
            show_stats
            ;;
        "help"|"-h"|"--help")
            usage
            ;;
        *)
            if [[ -n "${1:-}" ]]; then
                echo -e "${RED}Unknown command: $1${NC}"
                echo ""
            fi
            usage
            exit 1
            ;;
    esac
}

main "$@"