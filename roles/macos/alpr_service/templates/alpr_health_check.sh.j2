#!/bin/bash
# ALPR Stack Health Check Script
# Generated by Ansible - Do not edit manually

set -euo pipefail

TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
LOG_FILE="{{ ansible_user_dir }}/orangead/alpr/logs/health_check.log"
DOCKER_SERVICE="com.orangead.alpr"
MONITOR_SERVICE="com.orangead.alpr-monitor"
ALPR_PORT="{{ macos_alpr_host_port }}"
CONTAINER_NAME="{{ macos_alpr_container_name }}"

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

log_message() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOG_FILE"
}

check_docker_service() {
    if launchctl list | grep -q "$DOCKER_SERVICE"; then
        log_message "[OK] Docker LaunchAgent is running"
        return 0
    else
        log_message "[FAIL] Docker LaunchAgent is not running"
        return 1
    fi
}

check_monitor_service() {
    if launchctl list | grep -q "$MONITOR_SERVICE"; then
        log_message "[OK] Monitor LaunchAgent is running"
        return 0
    else
        log_message "[FAIL] Monitor LaunchAgent is not running"
        return 1
    fi
}

check_docker_container() {
    if docker ps --filter "name=$CONTAINER_NAME" --format "{{.Names}}" | grep -q "$CONTAINER_NAME"; then
        local status=$(docker ps --filter "name=$CONTAINER_NAME" --format "{{.Status}}")
        log_message "[OK] Docker container is running: $status"
        return 0
    else
        log_message "[FAIL] Docker container is not running"
        return 1
    fi
}

check_alpr_service_port() {
    if nc -z localhost "$ALPR_PORT" 2>/dev/null; then
        log_message "[OK] ALPR service port $ALPR_PORT is accessible"
        return 0
    else
        log_message "[FAIL] ALPR service port $ALPR_PORT is not accessible"
        return 1
    fi
}

check_python_environment() {
    export PATH="{{ ansible_user_dir }}/.local/bin:$PATH"
    if cd "{{ ansible_user_dir }}/orangead/alpr" && uv run python --version >/dev/null 2>&1; then
        log_message "[OK] Python virtual environment 'alpr' is available"
        return 0
    else
        log_message "[FAIL] Python virtual environment 'alpr' is not available"
        return 1
    fi
}

check_camera_access() {
    # Try to list camera devices
    if system_profiler SPCameraDataType | grep -q "Camera"; then
        log_message "[OK] Camera devices detected"
        return 0
    else
        log_message "[WARNING]  No camera devices detected"
        return 1
    fi
}

check_detection_directory() {
    local detection_dir="{{ ansible_user_dir }}/orangead/alpr/detections"
    if [[ -d "$detection_dir" && -w "$detection_dir" ]]; then
        local file_count=$(find "$detection_dir" -name "*.jpg" | wc -l)
        log_message "[OK] Detection directory accessible ($file_count images)"
        return 0
    else
        log_message "[FAIL] Detection directory not accessible"
        return 1
    fi
}

check_disk_space() {
    local usage=$(df "{{ ansible_user_dir }}" | tail -n1 | awk '{print $5}' | sed 's/%//')
    if (( usage < 90 )); then
        log_message "[OK] Disk space OK (${usage}% used)"
        return 0
    else
        log_message "[WARNING]  Disk space high (${usage}% used)"
        return 1
    fi
}

main() {
    log_message "=== ALPR Stack Health Check Started ==="
    
    local overall_status=0
    local checks_passed=0
    local total_checks=8
    
    # Run all health checks
    check_docker_service || overall_status=1
    [[ $? -eq 0 ]] && ((checks_passed++))
    
    check_monitor_service || overall_status=1
    [[ $? -eq 0 ]] && ((checks_passed++))
    
    check_docker_container || overall_status=1
    [[ $? -eq 0 ]] && ((checks_passed++))
    
    check_alpr_service_port || overall_status=1
    [[ $? -eq 0 ]] && ((checks_passed++))
    
    check_python_environment || overall_status=1
    [[ $? -eq 0 ]] && ((checks_passed++))
    
    check_camera_access || overall_status=1
    [[ $? -eq 0 ]] && ((checks_passed++))
    
    check_detection_directory || overall_status=1
    [[ $? -eq 0 ]] && ((checks_passed++))
    
    check_disk_space || overall_status=1
    [[ $? -eq 0 ]] && ((checks_passed++))
    
    # Report overall status
    log_message "=== Health Check Summary: $checks_passed/$total_checks checks passed ==="
    
    if [[ $overall_status -eq 0 ]]; then
        log_message "[SUCCESS] ALPR Stack Health Check: ALL SYSTEMS OPERATIONAL"
    else
        log_message "[WARNING]  ALPR Stack Health Check: ISSUES DETECTED"
        log_message ""
        log_message "Troubleshooting Commands:"
        log_message "- Restart Docker:  launchctl kickstart -k gui/\$(id -u)/com.orangead.alpr"
        log_message "- Restart Monitor: launchctl kickstart -k gui/\$(id -u)/com.orangead.alpr-monitor"
        log_message "- Check Docker:    docker ps -a | grep {{ macos_alpr_container_name }}"
        log_message "- View Logs:       tail -f {{ ansible_user_dir }}/orangead/alpr/logs/*.log"
    fi
    
    log_message "=== Health Check Complete ==="
    echo ""
    
    exit $overall_status
}

main "$@"