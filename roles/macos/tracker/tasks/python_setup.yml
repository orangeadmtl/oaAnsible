---
# Python environment setup tasks for tracker deployment
# Handles Python version management and virtual environment setup

- name: Check if specific Python version is available via UV
  ansible.builtin.shell: |
    set -o pipefail
    export PATH="{{ uv_path | default('$HOME/.local/bin/uv') }}:$PATH"
    uv python list | grep "{{ tracker_python_version }}" || echo "not_found"
  register: python_version_available
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"

- name: Install Python version via UV if not available
  ansible.builtin.shell: |
    set -o pipefail
    export PATH="{{ uv_path | default('$HOME/.local/bin/uv') }}:$PATH"
    uv python install {{ tracker_python_version }}
  register: uv_python_install
  changed_when: true
  become: true
  become_user: "{{ ansible_user }}"
  when: python_version_available.stdout == "not_found"

- name: Set final Python version to use
  ansible.builtin.set_fact:
    final_python_version: "{{ tracker_python_version }}"

- name: Debug final Python version
  ansible.builtin.debug:
    msg: "Will use Python version: {{ final_python_version }}"

- name: Initialize UV project for tracker
  ansible.builtin.shell: |
    set -o pipefail
    cd {{ ansible_user_dir }}/orangead/tracker
    export PATH="{{ uv_path | default('$HOME/.local/bin/uv') }}:$PATH"
    uv sync --python {{ final_python_version }}
  register: uv_sync_result
  changed_when: uv_sync_result.stdout is search('Synced')
  become: true
  become_user: "{{ ansible_user }}"
  environment:
    PATH: "/opt/homebrew/bin:/opt/homebrew/sbin:{{ ansible_user_dir }}/.local/bin:{{ ansible_env.PATH }}"

- name: Fix ownership of UV project directories
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ ansible_user }}"
    group: staff
    recurse: true
  loop:
    - "{{ ansible_user_dir }}/orangead/tracker/.venv"
    - "{{ ansible_user_dir }}/orangead/tracker"
    - "{{ ansible_user_dir }}/.local/share/uv"
    - "{{ ansible_user_dir }}/.cache/uv"
  become: true
  failed_when: false

- name: Display UV sync output
  ansible.builtin.debug:
    msg: "{{ uv_sync_result.stdout_lines }}"
  when: uv_sync_result.stdout_lines is defined

- name: Copy dependency verification script
  ansible.builtin.copy:
    src: verify_dependencies.py
    dest: "{{ ansible_user_dir }}/orangead/tracker/verify_dependencies.py"
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  become: true

- name: Verify dependencies installation
  ansible.builtin.shell: |
    cd {{ ansible_user_dir }}/orangead/tracker
    export PATH="{{ uv_path | default('$HOME/.local/bin/uv') }}:$PATH"
    uv run python verify_dependencies.py
  register: dependency_verification
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"

- name: Display dependency verification results
  ansible.builtin.debug:
    msg: "{{ dependency_verification.stdout_lines }}"
