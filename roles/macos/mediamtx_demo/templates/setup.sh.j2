#!/bin/bash

# MediaMTX Demo Setup Script
# Generated by Ansible for {{ inventory_hostname }}
# Simplified verification script - no intrusive testing

echo "[VIDEO] MediaMTX Demo - Environment Check"
echo "===================================="

cd {{ mediamtx_demo.demo.base_dir }}

echo "[OK] MediaMTX Demo deployed via Ansible"
echo "[FILES] Base directory: {{ mediamtx_demo.demo.base_dir }}"
echo "[CONFIG] Binary location: {{ mediamtx_demo.binary.install_dir }}/mediamtx"
echo "[SVC] Configuration: {{ mediamtx_demo.binary.config_dir }}/mediamtx.yml"

echo ""
echo "[LAUNCH] Service Status:"
if launchctl list {{ mediamtx_demo.service.name }} >/dev/null 2>&1; then
    echo "[OK] MediaMTX service is running"
    SERVICE_RUNNING=true
else
    echo "[WARNING] MediaMTX service not running"
    echo "   Start it with: ./scripts/start.sh"
    SERVICE_RUNNING=false
fi

echo ""
echo "[PYTHON] Python Environment Setup:"
if [ -f "scripts/setup_python.sh" ]; then
    echo "[CONFIG] Setting up Python environment with uv..."
    if ./scripts/setup_python.sh; then
        echo "[OK] Python environment ready!"
        PYTHON_READY=true
    else
        echo "[FAIL] Python environment setup failed"
        echo "[TIPS] Try running: ./scripts/setup_python.sh"
        PYTHON_READY=false
    fi
else
    echo "[FAIL] Python setup script not found"
    PYTHON_READY=false
fi

echo ""
echo "[VERIFY] Quick Environment Test:"
echo "   Run: ./scripts/test_camera.sh"
echo "   (This does NOT test camera access - just verifies the environment)"

echo ""
echo "[LIST] Ready-to-Use Commands:"
echo ""
echo "[MEDIA] Start Camera Streaming:"
echo "   ffmpeg -f avfoundation -framerate {{ mediamtx_demo.camera.framerate }} -pixel_format {{ mediamtx_demo.camera.pixel_format }} -i \"{{ mediamtx_demo.camera.device_id }}\" -c:v {{ mediamtx_demo.camera.codec }} -preset {{ mediamtx_demo.camera.preset }} -r {{ mediamtx_demo.camera.framerate }} -f rtsp rtsp://localhost:{{ mediamtx_demo.streaming.rtsp_port }}/{{ mediamtx_demo.streaming.stream_path }}"
echo ""
echo "[WATCH] View Stream:"
echo "   vlc rtsp://localhost:{{ mediamtx_demo.streaming.rtsp_port }}/{{ mediamtx_demo.streaming.stream_path }}"
echo "   vlc rtsp://{{ inventory_hostname }}:{{ mediamtx_demo.streaming.rtsp_port }}/{{ mediamtx_demo.streaming.stream_path }}"
echo ""
echo "[PYTHON] Python Demo (uv-powered):"
echo "   # Using uv run (recommended):"
echo "   uv run --project . python scripts/{{ mediamtx_demo.python.script_name }} --headless"
echo "   # Or with virtual environment:"
echo "   source {{ mediamtx_demo.python.venv_path }}/bin/activate && python scripts/{{ mediamtx_demo.python.script_name }} --headless && deactivate"

echo ""
echo "[STATS] Service Management:"
echo "   Start service: ./scripts/start.sh"
echo "   Stop service: ./scripts/stop.sh"
echo "   Check status: ./scripts/status.sh"

echo ""
echo "[WEB] Network Access:"
echo "   RTSP Stream: rtsp://{{ inventory_hostname }}:{{ mediamtx_demo.streaming.rtsp_port }}/{{ mediamtx_demo.streaming.stream_path }}"
echo "   API Status: http://{{ inventory_hostname }}:{{ mediamtx_demo.streaming.api_port }}/v3/paths/list"

echo ""
echo "[LIST] Status Summary:"
if [ "$SERVICE_RUNNING" = true ] && [ "$PYTHON_READY" = true ]; then
    echo "[OK] All components ready!"
    echo "[TIPS] Grant camera permissions to Terminal/FFmpeg and start streaming"
else
    echo "[WARNING]  Some components need attention:"
    [ "$SERVICE_RUNNING" = false ] && echo "   - Start MediaMTX service: ./scripts/start.sh"
    [ "$PYTHON_READY" = false ] && echo "   - Check Python virtual environment setup"
fi

echo ""
echo "[DOCS] Full documentation: README.md"